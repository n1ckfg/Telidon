TITLE: C specific user error handling

MODULE#: 09.01.11.01

DESCRIPTION: This module tests the function of <set error handling> and
if some functions generate C binding specific errors under certain incorrect
conditions. The error is handled by a user defined error handling subroutine.

SEMANTIC REQUIREMENTS:

SR1.  <set error handling> sets PHIGS error handling function to new error
handling function. The implementation will invoke the new function when an
error is detected.
#F 324
#D
#S C/3.11/7/4
#T P01/1

SR2.  <set error handling> returns the previous error handling function.
#F 324
#D
#S C/3.11/7/8
#T P01/2

SR3.  <set error handling> returns default system error handling function
perr_hand when called first time.
#F 324
#D
#S C/3.11/7/10
#T P02/1

SR4.  If functions <redraw all structures>, <update workstation>, <set display
update state>, <set text precision>, <set text path>, <set text alignment>,
<set annotation text path>, <set annotation text alignment>, <set interior
style>, <set edge flag>, <set individual asf>, <set text representation>, <set
interior representation>, <set edge representation>, <set colour model>, <set
local transformation 3>, <set local transformation>, <set modelling clipping
indicator>, <set view representation 3>, <set view representation>, <set view
transformation input priority>, <set edit mode>, <delete structure network>,
<set conflict resolution>, <retrieve paths to ancestors>, <retrieve paths to
decendants>, <initialize choice 3>-<initialize pick>, <set locator mode>-<set
string mode>, <flush device events>, <set error handling mode> are called, and
enumeration type is out of range, then error 2202 is generated and the
function is ignored.
#F 5 6 7 37 43 44 47 48 50 53 62 65 66 67 72 75 76 81 84 85 86 117 127
#F 140 145 146 158-161 164-169 187 318
#D
#S C/3.11.3/8/1 4.12/109/6
#T P03/1 P03/2 P03/3 P03/4 P03/5 P03/6 P03/7 P03/8 P03/9 P03/10 P03/11
   P03/12 P03/13 P03/14 P03/15 P03/16 P03/17 P03/18 P03/19 P03/20
   P03/21
 
LOCAL DICTIONARY:
 
  Functions ---
    5: prst    <redraw all structures>
    6: puwk    <update workstation>
    7: psdus   <set display update state>
   37: pstxpr  <set text precision>
   43: pstxp   <set text path>
   44: pstxal  <set text alignment>
   47: psatp   <set annotation text path>
   48: psatal  <set annotation text alignment>
   50: psis    <set interior style>
   53: psedfg  <set edge flag>
   62: psiasf  <set individual asf>
   65: pstxr   <set text representation>
   66: psir    <set interior representation>
   67: psedr   <set edge representation>
   72: pscmd   <set colour model>
   75: pslmt3  <set local transformation 3>
   76: pslmt   <set local transformation>
   81: psmcli  <set modelling clipping indicator>
   84: psvwr3  <set view representation 3>
   85: psvwr   <set view representation>
   86: psvtip  <set view transformation input priority>
  117: psedm   <set edit mode>
  127: pdsn    <delete structure network>
  140: pscnrs  <set conflict resolution>
  145: prepan  <retrieve paths to ancestors>
  146: prepde  <retrieve paths to descendants>
  158: pinch3  <initialize choice 3>
  159: pinch   <initialize choice>
  160: pinpk3  <initialize pick 3>
  161: pinpk   <initialize pick>
  164: pslcm   <set locator mode>
  165: psskm   <set stroke mode>
  166: psvlm   <set valuator mode>
  167: pschm   <set choice mode>
  168: pspkm   <set pick mode>
  169: psstm   <set string mode>
  187: pflush  <flush device events>
  318: pserhm  <set error handling mode>
 
  Data Structures ---
 


PROGRAM 1: Function of <Set error handler>

CHARACTERISTICS: nnnn

OPERATOR SCRIPT:
This is a passive test, but take care to invoke it so as to link
in the standard PVT user-defined error handler.  Since this is
the mode in which the non-error-handling tests are executed, this
program should be invoked in the normal way.

DESIGN:
(1) Design a new error handler "my_err_hand" which saves error code and
function identifier at cur_error, cur_function with initial cur_error=0,
cur_function = 555.
(2) Use user defined "perr_hand" which is used by other test programs and
generates  an error. The error information will be stored at common variable
errsav[0], funsav[0].
(3) Use <set error handler> to set a new error handler as "my_err_handler"
and  return old error handler. Generate an error using same function with (2).
Compare cur_error with errsav[0], cur_function with funsav[0] to test
if "my_err_hand" is invoked.
(4) Set error handler back to old error handler. Generate an error again.
It should be stored in errsav[1], funsav[1]. Compare errsav[0] with errsav[1],
funsav[0] with funsav[1] to test if <set error handler> returned correct
error handler.

*** *** ***

cur_error=0, cur_function=555

<open phigs>
<text>: signals error
<set error handler> with (my_err_handler, old_err_handler)
<text>: signals error
TEST: #SR 1
      "<Set error handler> should set PHIGS error handler to application
       defined error handler specified with parameter new error handling
       function."
pass/fail depending on (cur_error = errsav[0]       and
                        cur_function = funsav[0])

<set error handler> with (old_err_handler, new_err_handler)
<text>: signals error
TEST: #SR 2
      "<set error handler> should return previous error handling subroutine."
pass/fail depending on (errsav[1] = errsav[0]      and
                        funsav[1] = funsav[0])

<close phigs>

END PROGRAM 1


PROGRAM 2: First call <set error handler>

CHARACTERISTICS: nnnn

OPERATOR SCRIPT:
This program uses both system default error handler and application
defined error handler "my_err_hander" which is within this program.
The usual means of invoking PVT programs links in a user-defined error
handler. Be sure to use the special mechanism provided (normally the "phfe"
or "phce" command) for invoking programs without the user-defined error
handler.

DESIGN:
(1) Generates an error using default system error handling subroutine
"perr_hand" which will be written in error file.
(2) Set error handler to "my_err_handler" and return old error handler.
Generates an error.
(3) Set error handler to old error handler, and generates an error which
will be stored in error file.
(4) Rewind error file, read two error messages and compare them to test
if <set error handler> returns system error handler when called first time.

**** **** ****

cur_error=0, cur_function=555

<open phigs>
<text>: signals error
<set error handler> with (my_err_handler, default_err_handler)
<text>: signals error
<set error handler> with (default_err_handler, old_err_handler)
<text>: signals error
TEST: #SR 3
      "<Set error handler> should return default system error handler when
       called first time."

rewind error file
get first error massage from error file and store at mesg1
get second error message from error file and store at mesg2
pass/fail depending of (mesg1 = mesg2)

<close phigs>

END PROGRAM 2



PROGRAM 3: Error 2202 handled by user

CHARACTERISTICS: ynnn

OPERATOR SCRIPT:
This is a passive test, but take care to invoke it so as to link
in the standard PVT user-defined error handler.  Since this is
the mode in which the non-error-handling tests are executed, this
program should be invoked in the normal way.

DESIGN:

Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the user-defined error handler saves
the error code, function identifier, and error file identifier in
an error table.

*** *** ***  Generate errors *** *** ***

<open workstation>

<redraw all structures> with control flag = 2: signals error
<update workstation> with regenerated flag = 3: signals error
<set display update state> with deferral mode = 5: signals error
<set display update state> with modification mode = 3: signals error
<set text path> with text path = 4: signals error
<set annotation text alignment> with annotation text alignment horizontal=4:
    signals error
<set annotation text alignment> with annotation text alignment vertical=6:
    signals error
<set interior style> with interior style = 5: signals error
<set edge flag> with edge flag = 2: signals error
<set individual asf> with aspect identifier = 18: signals error
<set individual asf> with aspect source flag value = 2: signals error
<set edge representation> with edge flag = 2: signals error
<set local transformation> with composition type = 3: signals error
<set view representation> with x-y clipping indicator = 2: signals error
<set view transformation input priority> with relative priority = 2:
    signals error
<set edit mode> with edit mode = 2: signals error
<delete structure network> with reference handling flag = 2: signals error
<set conflict resolution> with archival conflict resolution = 3: signale error
<set conflict resolution> with retrieval conflict resulution = 3:
    signals error
<retrieve paths to ancestors> with path order = 2: signals error
<set error handling mode> with error handling mode = 2: signals error

*** *** ***  Results of user-defined error handling  *** *** ***

TEST: #SR 4
      "If <redraw all structures> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 004, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <update workstation> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 005, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set display update state> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 006, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set display update state> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 006, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set text path> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 042, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set annotation text alignment> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 047, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set annotation text alignment> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 047, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set interior style> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 049, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set edge flag> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 052, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set individual asf> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 061, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set individual asf> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 061, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set edge representation> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 066, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set local transformation> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 075, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set view representation> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 084, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set view transformation input priority> is called and specified
       enumeration type is out of range, it should return error code 2202,
       function identifier 085, and the current error file identifier to
       the user defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set edit mode> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 096, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <delete structure network> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 106, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set conflict resolution> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 119, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set conflict resolution> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 119, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <retrieve paths to ancestors> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 124, and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

TEST: #SR 4
      "If <set error handling mode> is called and specified enumeration
       type is out of range, it should return error code 2202, function
       identifier 179 , and the current error file identifier to the user
       defined error handler."
pass/fail depending on (next entry in error table = expected values)

END PROGRAM 3


