TITLE: C binding specific errors handled by system

MODULE#: 09.01.11.02

DESCRIPTION: This module tests if some functions generate C binding
specific errors under certain incorrect conditions. The error is handled
by the default system error handling subroutine.

SEMANTIC REQUIREMENTS:

SR1.  If functions <redraw all structures>, <update workstation>, <set display
update state>, <set text precision>, <set text path>, <set text alignment>,
<set annotation text path>, <set annotation text alignment>, <set interior
style>, <set edge flag>, <set individual asf>, <set text representation>, <set
interior representation>, <set edge representation>, <set colour model>, <set
local transformation 3>, <set local transformation>, <set modelling clipping
indicator>, <set view representation 3>, <set view representation>, <set view
transformation input priority>, <set edit mode>, <delete structure network>,
<set conflict resolution>, <retrieve paths to ancestors>, <retrieve paths to
decendants>, <initialize choice 3>-<initialize pick>, <set locator mode>-<set
string mode>, <flush device events>, <set error handling mode> are called, and
enumeration type is out of range, then error 2202 is generated and the
function is ignored.
#F 5 6 7 37 43 44 47 48 50 53 62 65 66 67 72 75 76 81 84 85 86 117 127
#F 140 145 146 158-161 164-169 187 318
#D
#S C/3.11.3/8/1 4.12/109/6
#T P01/1 P01/2 P01/3 P01/4 P01/5 P01/6 P01/7 P01/8 P01/9 P01/10 P01/11
   P01/12 P01/13 P01/14 P01/15 P01/16 P01/17 P01/18 P01/19 P01/20
   P01/21
 
LOCAL DICTIONARY:
 
  Functions ---
    5: prst    <redraw all structures>
    6: puwk    <update workstation>
    7: psdus   <set display update state>
   37: pstxpr  <set text precision>
   43: pstxp   <set text path>
   44: pstxal  <set text alignment>
   47: psatp   <set annotation text path>
   48: psatal  <set annotation text alignment>
   50: psis    <set interior style>
   53: psedfg  <set edge flag>
   62: psiasf  <set individual asf>
   65: pstxr   <set text representation>
   66: psir    <set interior representation>
   67: psedr   <set edge representation>
   72: pscmd   <set colour model>
   75: pslmt3  <set local transformation 3>
   76: pslmt   <set local transformation>
   81: psmcli  <set modelling clipping indicator>
   84: psvwr3  <set view representation 3>
   85: psvwr   <set view representation>
   86: psvtip  <set view transformation input priority>
  117: psedm   <set edit mode>
  127: pdsn    <delete structure network>
  140: pscnrs  <set conflict resolution>
  145: prepan  <retrieve paths to ancestors>
  146: prepde  <retrieve paths to descendants>
  158: pinch3  <initialize choice 3>
  159: pinch   <initialize choice>
  160: pinpk3  <initialize pick 3>
  161: pinpk   <initialize pick>
  164: pslcm   <set locator mode>
  165: psskm   <set stroke mode>
  166: psvlm   <set valuator mode>
  167: pschm   <set choice mode>
  168: pspkm   <set pick mode>
  169: psstm   <set string mode>
  187: pflush  <flush device events>
  318: pserhm  <set error handling mode>
 
  Data Structures ---
 


PROGRAM 1: Error 2202 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
This program uses the system default error handler.  The usual
means of invoking PVT programs links in a user-defined error handler.
Be sure to use the special mechanism provided (normally the "phfe" or
"phce" command) for invoking programs without the user-defined error
handler, since it overrides the system handler.

The general idea of this test is that errors are generated and the
resulting error messages from the system default error handler are
displayed so that you can verify their contents.

The program needs to display the contents of the error file one message at
a time .  If the system has a consistent message header (as specified to
INITPH), this is done automatically.  If not, you are prompted to say
whether the entire message has been displayed, since one message may occupy
several records.  The program will keep displaying successive records
until the entire message is visible.

Once the entire error message is displayed, you must enter the function
that  generated the corresponding error as reported in the message.  You
may identify the function either by its full generic name ("polyline 3"),
or by its unique number as specified in Fortran and C bindings (these are
the same). E.g. instead of typing "polyline 3", you can enter "8".  If the
message does not identify the function, enter a negative number to signify
this.

The error message may  or may not specify the numeric code of the error.
If so, simply enter the code as prompted.  If not, enter "n".  The program
will then display the standard wording for the error (there may be several
possible wordings, since a given condition may sometimes generate one of
several errors).  If the actual message is accurate with respect to the
standard wording (has the same meaning), enter "y", otherwise "n".

DESIGN:

Throughout this program, every time an error is signalled (as noted by
the tag "signals error"), the system-defined error handler should call
<error logging> at least once to write an error message on the error file.

*** *** ***  Generate errors *** *** ***

<open workstation>

<redraw all structures> with control flag = 2: signals error
<update workstation> with regenerated flag = 3: signals error
<set display update state> with deferral mode = 5: signals error
<set display update state> with modification mode = 3: signals error
<set text path> with text path = 4: signals error
<set annotation text alignment> with annotation text alignment horizontal=4:
    signals error
<set annotation text alignment> with annotation text alignment vertical=6:
    signals error
<set interior style> with interior style = 5: signals error
<set edge flag> with edge flag = 2: signals error
<set individual asf> with aspect identifier = 18: signals error
<set individual asf> with aspect source flag value = 2: signals error
<set edge representation> with edge flag = 2: signals error
<set local transformation> with composition type = 3: signals error
<set view representation> with x-y clipping indicator = 2: signals error
<set view transformation input priority> with relative priority = 2:
    signals error
<set edit mode> with edit mode = 2: signals error
<delete structure network> with reference handling flag = 2: signals error
<set conflict resolution> with archival conflict resolution = 3: signale error
<set conflict resolution> with retrieval conflict resulution = 3:
    signals error
<retrieve paths to ancestors> with path order = 2: signals error
<set error handling mode> with error handling mode = 2: signals error

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 1
      "If <redraw all structures> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <update workstation> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set display update state> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set display update state> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set text path> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set annotation text alignment> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set annotation text alignment> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set interior style> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set edge flag> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set individual asf> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set individual asf> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set edge representation> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set local transformation> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set view representation> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set view transformation input priority> is called and specified
       enumeration type is out of range, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set edit mode> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <delete structure network> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set conflict resolution> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set conflict resolution> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <retrieve paths to ancestors> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 1
      "If <set error handling mode> is called and specified enumeration
       type is out of range, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 1

