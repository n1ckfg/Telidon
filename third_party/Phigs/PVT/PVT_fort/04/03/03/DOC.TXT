TITLE: HLHSR

MODULE#: 04.03.03

DESCRIPTION: This module tests the ability of the programmer to
set an HLHSR identifier in the CSS and to set and to change the
HLHSR mode.  These values control the visibility of primitive
parts which may be obscured by other primitives.  It also tests
the initial default settings of a workstation's HLHSR idendifier
and HLHSR mode and that the provided facilities meet the minimum
simulation requirements.


SEMANTIC REQUIREMENTS:

*** *** *** *** ***   HLHSR Identifier   *** *** *** *** ***

SR1.  <set HLHSR identifier> creates an HLHSR identifier element
in the CSS; all integer values are valid.
#F 73
#D 7.3.2.9
#S 4.4.1/23/1 4.5.2/40/1 4.6.6/76/3
#T P01/1 P01/2 P01/3

SR2.  If current element is HLHSR identifier then <inquire
current element type and size> returns the element type as HLHSR
identifier and the appropriate element size.
#F 303
#D 7.3.2.9
#S 4.4.4/29/5
#T P01/1

SR3.  If current element is HLHSR identifier then <inquire
current element content> returns the appropriate data for HLHSR
identifier.
#F 304
#D 7.3.2.9
#S 4.4.4/29/5
#T P01/2 P01/3

*** *** *** *** ***   HLHSR Mode   *** *** *** *** ***

SR4.  <Set HLHSR mode> sets the workstation's requested HLHSR
mode.
#F 74
#D 5.5.3
#S 4.5.2/40/1 4.6.6/76/3
#T P02/1

SR5.  <Inquire HLHSR mode> returns the workstation's HLHSR update
state, current HLHSR mode, and requested HLHSR mode.
#F 219
#D 5.5
#S 4.11/108/1
#T P02/1 P02/2 P02/3 P02/4 P02/5

SR6.  If the display update state is not [WAIT, NIVE] and either
the `dynamic modification accepted for HLHSR mode' in the
workstation description table is IMM or the `display surface
empty' entry in the workstation state list is EMPTY, then <set
HLHSR mode> sets the current HLHSR mode entry as specified and
sets HLHSR update state to NOTPENDING.
#F 74 219 221 260
#D 5.5.1 5.5.2 5.8.1 5.8.2 5.8.3 6.8.12
#S 4.6.3/69/2 4.6.3/70/9 4.6.3/71/1
#T P02/2 P02/3 P02/4
#X 05.02

SR7.  If <set HLHSR mode> causes the current and requested HLHSR
mode entries to differ, then the HLHSR update state is PENDING
and the current HLHSR mode entry is not changed.
#F 74 219 221 260
#D 5.5.1 5.5.2 5.8.1 5.8.3 6.8.12
#S 4.6.3/69/2 4.6.3/70/9 4.6.3/71/1
#T P02/5
#X 05.02

*** *** *** *** ***   HLHSR facilities   *** *** *** *** ***

SR8.  <Inquire HLHSR facilities> returns the list of HLHSR
identifiers and the list of HLHSR modes for a given workstation
type.
#F 256
#D 6.5
#S n
#T P03/1 P03/4

SR9.  The list of available HLHSR identifiers contains the default
identifier, 0.
#F 256
#D 6.5.1 6.5.2
#S 4.6.6/76/3 6.3/310/1
#T P03/2 P03/3

SR10.  The list of available HLHSR modes contains the default mode, 0.
#F 256
#D 6.5.3 6.5.4
#S 4.6.6/76/3 6.6/316/4
#T P03/5 P03/6

*** *** *** *** ***   HLHSR mode   *** *** *** *** ***

SR11.  All HLHSR modes in the list of available HLHSR modes are valid
for the workstation.
#F 74 219 256
#D 6.5.4
#S n
#T P03/7

SR12.  Immediately after <open workstation> the HLHSR update state in the
Workstation State List (WSL) table is NOTPENDING.
#F 219
#D 5.5.1
#S 6.6/316/4
#T P04/1 P04/5

SR13.  Immediately after <open workstation> the current HLHSR mode in the
Workstation State List (WSL) table is 0.
#F 219
#D 5.5.2
#S 6.6/316/4
#T P04/2

SR14.  Immediately after <open workstation> the requested HLHSR mode in the
Workstation State List (WSL) table is 0.
#F 219
#D 5.5.3
#S 6.6/316/4
#T P04/3

SR15.  The only possible values for HLHSR update state are PENDING and
NOTPENDING.
#F 219
#D 5.5.1
#S 6.6/316/4
#T P04/4
 
LOCAL DICTIONARY:
 
  Functions ---
   73: pshrid  <set hlhsr identifier>
   74: pshrm   <set hlhsr mode>
  219: pqhrm   <inquire hlhsr mode>
  221: pqdus   <inquire display update state>
  256: pqhrif  <inquire hlhsr facilities>
  260: pqdswa  <inquire dynamics of workstation attributes>
  303: pqcets  <inquire current element type and size>
  304: pqceco  <inquire current element content>
 
  Data Structures ---
  5  ...  workstation_state_list
  5.5  ...  hlhsr_entry
  5.5.1  ...  hlhsr_update_state
  5.5.2  ...  current_hlhsr_mode
  5.5.3  ...  requested_hlhsr_mode
  5.8  ...  update_status
  5.8.1  ...  deferral_mode
  5.8.2  ...  modification_mode
  5.8.3  ...  display_surface_empty
  6  ...  workstation_description_table
  6.5  ...  hlhsr_entry
  6.5.1  ...  number_of_available_hlhsr_identifiers
  6.5.2  ...  list_of_available_hlhsr_identifiers
  6.5.3  ...  number_of_available_hlhsr_modes
  6.5.4  ...  list_of_available_hlhsr_modes
  6.8  ...  dynamic_modification_accepted_for
  6.8.12 ...  hlhsr_mode
  7  ...  structure_state_list
  7.3  ...  list_of_structure_elements
  7.3.2  ...  primitive_attributes
  7.3.2.9  ...  hlhsr_identifier
 


PROGRAM 1: Set and inquire HLHSR identifier

CHARACTERISTICS: ynnn

OPERATOR SCRIPT: passive test.

DESIGN:

Use <inquire current element type and size> throughout to determine:
    celtyp = current element type
    celsiz = current element size

Use <inquire current element content> throughout to determine:
    celcon = current element content

<set HLHSR identifier> 0

TEST: #SR 1 2
      "<Inquire current element type and size> should return
       HLHSR identifier as the type of the created element
       and the appropriate element size."
<inquire current element type and size> to set celtyp, celsiz
pass/fail depending on
  (celtyp = HLHSR identifier and
   celsiz = values specified by the standard and language binding)

TEST: #SR 1 3
      "<Inquire current element content> should return the standard
       representation for HLHSR identifier."
<inquire current element content> to set celcon
pass/fail depending on
  (celcon = representation as specified by the standard and language binding)

<inquire HLHSR facilities> to determine
   unavid = HLHSR identifier not in list of available HLHSR identifiers
            for primary workstation type
TEST: #SR 1 3
      "Any HLHSR identifier should be accepted as valid, even if
       not supported by some workstation types."
<set HLHSR identifier> to unavid
if error signalled then
   fail
   write message about HLHSR identifier
   go to done
endif
<inquire current element content> to determine if HLHSR identifier set
pass/fail depending on (celcon = standard representation for HLHSR
                        identifier = unavid)

done:

END PROGRAM 1


PROGRAM 2: Set and inquire HLHSR mode

CHARACTERISTICS: ynnn

OPERATOR SCRIPT: passive test.

DESIGN:

<inquire HLHSR facilities> to determine
  nummod = number of available HLHSR modes
  lstmod = list of HLHSR modes
<inquire HLHSR mode> to determine
  orgmod = current HLHSR mode, original

val = 0
try to find HLHSR mode distinct from original mode
for each hrmd in lstmod
   if hrmd not= orgmod then
      val = hrmd
      go to next
   endif
loop

next:
<set display update state> to WAIT, UWOR to allow
   testing of hlhsr update status.

<set HLHSR mode> to val
<inquire HLHSR mode> to determine
   update = HLHSR update state
   reqmod = requested HLHSR mode
   curmod = current HLHSR mode

TEST: #SR 4 5
      "The requested HLHSR mode should be returned as set."
pass/fail depending on (reqmod = val)

<inquire dynamics of workstation attributes> to determine
   dynmod = dynamic modification entry for HLHSR mode

(Surface should be empty)
<inquire display update state> to determine
   surfmt = display surface empty

if surfmt not= EMPTY then
   message about unexpected state
   goto non_empty_test
endif

if (dynmod = IMM) then
   TEST: #SR 5 6
         "If the dynamic modification entry for HLHSR mode is IMM
          and the display surface is EMPTY, then new values
          should be set for current HLHSR mode and the HLHSR update
          state should be NOTPENDING."
else
   TEST: #SR 5 6
         "If the dynamic modification entry for HLHSR mode is not
          IMM and the display surface is EMPTY, then new values
          should be set for current HLHSR mode and the HLHSR update
          state should be NOTPENDING."
endif
pass/fail depending on (update = NOTPENDING and
                        curmod = val)

Cause surface to be NOT EMPTY:
<open structure>
<polyline>
<close structure>
<post structure>

<set HLHSR mode> to orgmod
<update workstation> to force orgmod to be current
  and screen to be non-empty

(Surface should be non-empty)
<inquire display update state> to determine
   surfmt = display surface empty

if surfmt not= NOTEMPTY then
   message about unexpected state
   goto done
endif

<set HLHSR mode> to val
<inquire HLHSR mode> to determine
   update = HLHSR update state
   reqmod = requested HLHSR mode
   curmod = current HLHSR mode

non_empty_test:

if (dynmod = IMM) then
   TEST: #SR 5 6
         "If the dynamic modification entry for HLHSR mode is IMM
          and the display surface is not EMPTY, then new values
          should be set for current HLHSR mode and the HLHSR update
          state should be NOTPENDING."
   pass/fail depending on (update = NOTPENDING and
                           curmod = val)
else
   if (reqmod not= curmod) then
      TEST: #SR 5 7
            "If the current HLHSR mode differs from that
             requested by <set HLHSR mode>, then the current
             HLHSR mode should be unchanged and the HLHSR update
             state should be PENDING."
      pass/fail depending on (update = PENDING and
                              curmod = orgmod)
   endif
endif

done:

END PROGRAM 2

PROGRAM 3: HLHSR facilities

CHARACTERISTICS: ynnn

OPERATOR SCRIPT: passive test.

DESIGN:

<inquire HLHSR facilities> to determine
   naid  = number of available HLHSR identifiers
   namod = number of available HLHSR modes

*** *** *** *** HLHSR identifier tests *** *** *** ***

errcod = false
defid  = false = default identifier

do hr = 1 to naid
   thisid = hr'th identifier in the list
   keep track of non-zero error indicators:
   if errind not= 0 then
      errcod = true
      message about errind and thisid
      goto loop
   endif
   check for HLHSR identifier 0
   if thisid = 0 then
      defid = true
   endif
loop

TEST: #SR 8
      "All HLHSR identifiers in the list of available HLHSR identifiers
       should be accessible."
pass/fail depending on (NOT errcod)

TEST: #SR 9
      "The reported number of HLHSR identifiers should be at least 1."
pass/fail depending on (naid >= 1)

TEST: #SR 9
      "The list of available HLHSR identifiers should contain 0."
pass/fail depending on (defid)

*** *** *** *** HLHSR mode tests *** *** *** ***

errcod = false
defmod = false = default mode

do hr = 1 to namod
   thismd = hr'th mode in the list
   keep track of non-zero error indicators:
   if errind not= 0 then
      errcod = true
      message about errind and thismd
      goto loop
   endif
   check for HLHSR mode 0
   if thismd = 0 then
      defmod = true
   endif
loop

TEST: #SR 8
      "All HLHSR modes in the list of available HLHSR modes
       should be accessible."
pass/fail depending on (NOT errcod)

TEST: #SR 10
      "The reported number of HLHSR modes should be at least 1."
pass/fail depending on (namod >= 1)

TEST: #SR 10
      "The list of available HLHSR modes should contain 0."
pass/fail depending on (defmod)

TEST: #SR 11
      "All modes within the reported list of available HLHSR modes
       should be valid."
do hr = 1 to namod
  thismd = hr'th mode in the list
  <set HLHSR mode> to thismd
  if rejected as invalid then
     fail
     message about thismd
     goto done
  endif
  <inquire HLHSR mode> to determine
     reqmod = requested HLHSR mode
  if reqmod not= thismd
     fail
     message about reqmod and thismd
     goto done
  endif
loop
pass

done:

END PROGRAM 3

PROGRAM 4: Updating of HLHSR modes

CHARACTERISTICS: ynnn

OPERATOR SCRIPT: passive test.

DESIGN:

<Inquire HLHSR mode> to determine
  upstat = HLHSR update state
  curmod = current HLHSR mode
  reqmod = requested HLHSR mode

if upstat = PENDING or NOTPENDING then
   statok = true
else
   statok = false
endif

TEST: #SR 12
      "Immediately after <open workstation>, the HLHSR update state
       should be NOTPENDING."
pass/fail depending on (upstat = NOTPENDING)

TEST: #SR 13
      "Immediately after <open workstation>, the current HLHSR mode
       should be 0."
pass/fail depending on (curmod = 0)

TEST: #SR 14
      "Immediately after <open workstation>, the requested HLHSR mode
       should be 0."
pass/fail depending on (reqmod = 0)

Try to cause HLHSR update state to be PENDING by making
   surface NOT EMPTY:
open structure
polyline
close structure
post structure
update workstation

TEST: #SR 15
      "The HLHSR update state should be either PENDING or NOTPENDING."
<set HLHSR mode> 0
<inquire HLHSR mode> to determine upstat
pass/fail depending on ((upstat = PENDING or NOTPENDING)  and
                        statok)

<close workstation>
<open workstation>

TEST: #SR 12
      "Immediately after re-opening the workstation, the HLHSR update
       state should be NOTPENDING."
<Inquire HLHSR mode> to determine
  upstat = HLHSR update state
pass/fail depending on (upstat = NOTPENDING)

END PROGRAM 4
