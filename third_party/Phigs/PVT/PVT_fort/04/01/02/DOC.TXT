TITLE: Polymarker

MODULE#: 04.01.02

DESCRIPTION: This module tests that polymarkers are rendered
correctly and that a program can set up a polyline element in the
CSS, which will create a primitive upon traversal.

SEMANTIC REQUIREMENTS:

*** *** *** *** ***   <Polymarker 3>   *** *** *** *** ***

SR1.   <Polymarker 3> creates a polymarker 3 element in the CSS.
#F 11
#D 7.3.1.3
#S 4.4.1/22/3 4.5.1/34/1
#T P01/1 P01/2 P02/1 P02/2

SR2.   If current element is polymarker 3 then <inquire current
element type and size> returns the element type as polymarker 3
and the appropriate element size.
#F 303
#D 7.3.1.3
#S 4.4.4/29/5
#T P01/1

SR3.   If current element is polymarker 3 then <inquire current
element content> returns the appropriate data for polymarker 3.
#F 304
#D 7.3.1.3
#S 4.4.4/29/5
#T P01/2


*** *** *** *** ***   <Polymarker>   *** *** *** *** ***

SR4.   <Polymarker> creates a polymarker element in the CSS.
#F 12
#D 7.3.1.4
#S 4.4.1/22/3 4.5.1/34/1
#T P01/3 P01/4 P02/1 P02/2

SR5.   If current element is polymarker then <inquire current
element type and size> returns the element type as polymarker and
the appropriate element size.
#F 303
#D 7.3.1.4
#S 4.4.4/29/5
#T P01/3

SR6.   If current element is polymarker then <inquire current
element content> returns the appropriate data for polymarker.
#F 304
#D 7.3.1.4
#S 4.4.4/29/5
#T P01/4

SR7. <Polymarker> and <polymarker_3> primitives are specified by
a list of 2D or 3D points, expressed in modelling coordinates
(MC).  The primitive is rendered by displaying a marker centered
at each point.
#F 11 12
#D 7.3.1.3 7.3.1.4
#S 4.5.1/34/1
#T P02/1 P02/2
 
LOCAL DICTIONARY:
 
  Functions ---
   11: ppm3    <polymarker 3>
   12: ppm     <polymarker>
  303: pqcets  <inquire current element type and size>
  304: pqceco  <inquire current element content>
 
  Data Structures ---
  7  ...  structure_state_list
  7.3  ...  list_of_structure_elements
  7.3.1  ...  graphical_primitives
  7.3.1.3  ...  polymarker_3
  7.3.1.4  ...  polymarker
 


PROGRAM 1: Polymarker element

CHARACTERISTICS: nnnn

OPERATOR SCRIPT: passive test.

DESIGN:

Use <inquire current element type and size> throughout to determine:
    celtyp = current element type
    celsiz = current element size

Use <inquire current element content> throughout to determine:
    celcon = current element content

*** *** *** *** ***   Polymarker 3   *** *** *** *** ***

n = 5
xarr = 2.33 55.55 -4.4   123.0  0.0
yarr = 0.0  3.2   -99.99 3.2e22 -2.2e-22
zarr = 4.44 0.0   0.0    5.5    22.22

<polymarker 3> with n,xarr,yarr,zarr

TEST: #SR 1 2
      "<Inquire current element type and size> should return
       polymarker 3 as the type of the created element and the
       appropriate element size."
<inquire current element type and size> to set celtyp, celsiz
pass/fail depending on
  (celtyp = polymarker 3 and
   celsiz = values specified by the standard and language binding)

TEST: #SR 1 3
      "<Inquire current element content> should return the standard
       representation for polymarker 3."
<inquire current element content> to set celcon
pass/fail depending on
  (celcon = representation as specified by the standard and language binding)

*** *** *** *** ***   Polymarker   *** *** *** *** ***

<polymarker> with n,xarr,yarr

TEST: #SR 4 5
      "<Inquire current element type and size> should return
       polymarker as the type of the created element and the
       appropriate element size."
<inquire current element type and size> to set celtyp, celsiz
pass/fail depending on
  (celtyp = polymarker and
   celsiz = values specified by the standard and language binding)

TEST: #SR 4 6
      "<Inquire current element content> should return the standard
       representation for polymarker."
<inquire current element content> to set celcon
pass/fail depending on
  (celcon = representation as specified by the standard and language binding)

END PROGRAM 1


PROGRAM 2: Appearance of polymarkers

CHARACTERISTICS: ynny

OPERATOR SCRIPT:

GEOMETRY OF 3D POLYMARKERS: All the squares should contain a
polymarker with multiple asterisk markers.  All but one should
have their vertices accurately circled by a polymarker.  Identify
the polymarker which is not accurately marked.

GEOMETRY OF 2D POLYMARKERS: Same as GEOMETRY OF 3D POLYMARKERS,
above.

DESIGN:

set polymarker scale factor to reasonable size = 0.02 in WC

Divide screen up into 6 square labelled areas for all tests

sider = list of 6 sides from which cube may be viewed =
  front,back,left,right,top,bottom

Throughout, use asterisk for actual polymarker, circle for
expected position.

TEST: #SR 1 4 7
      "The appearance of a <polymarker 3> primitive should reflect
       its 3D geometry after being transformed."

ngsq = no-good square = random integer from 1 to 6
generate 3D list of points, visually distinct from any side for
  3D polymarker

for ix = 1 to 6
   rotate to view from sider(ix)
   display the 3D polymarker in square #ix
   calculate expected position of vertices
   if (ix = ngsq) then
      distort expected vertices
   endif
   use 2D circle polymarker to mark expected vertices
next ix

OPQA/GEOMETRY OF 3D POLYMARKERS: Which polymarker does NOT have
   all its asterisk vertices circled?
pass/fail depending on:
   (operator identifies square #ngsq)

TEST: #SR 1 4 7
      "The appearance of a <polymarker> primitive should reflect
       its 2D geometry after being transformed."

ngsq = no-good square = random integer from 1 to 6
generate non-linear 2D list of points distinct from any side for
  2D polymarker

for ix = 1 to 6
   rotate 45 degrees around x and y axis into unit cube to show
      z-values
   rotate to view from sider(ix)
   display the 2D polymarker in square #ix
   calculate expected position of vertices
   if (ix = ngsq) then
      distort expected vertices
   endif
   use 2D circle polymarker to mark expected vertices
next ix

OPQA/GEOMETRY OF 2D POLYMARKERS: Which polymarker does NOT have
   all its asterisk vertices circled?
pass/fail depending on:
   (operator identifies square #ngsq)

END PROGRAM 2
