TITLE: Archive and retrieve errors handled by system

MODULE#: 09.01.09.02

DESCRIPTION: This module tests that the functions which are related
to archive or retrieve generate the specified error codes if they are executed
in an incorrect conditions.  The error is handled by the default system error
handling subroutine. Also, this module tests the requirement that no side
effects are generated.

SEMANTIC REQUIREMENTS:

SR1.   If function <open archive file> is called, and a specified archive
file cannot be opened, then error 400 is generated and the function is
ignored.
#F 135
#D 9.1 8.1
#S 4.12/109/6
#T

SR2.   If function <open archive file> is called, and openning this
archive file would exceed the maximum number of simultaneously open
archive files, then error 401 is generated and the function is ignored.
#F 135
#D 2.4 9.1 8.1
#S 4.12/109/6
#T P01/1 P01/2

SR3.   If function <open archive file> is called, and the specified
archive file identifier already is in use, then error 402 is generated
and the function is ignored.
#F 135
#D 4.6.2 9.1 8.1
#S 4.12/109/6
#T P02/1 P02/2

SR4.   If function <open archive file> is called, and the archive file
is not a PHIGS archive file, then error 403 is generated and the
function is ignored.
#F 135
#D 9.1 8.1
#S 4.12/109/6
#T

SR5.   If functions <close archive file> - <archive all structures>,
<retrieve structure identifiers> - <retrieve all structures>,
<delete structures from archive> - <delete all structures from archive>
are called, and the specified archive file is not open,
then error 404 is generated and the function is ignored.
#F 136-139 141-144 147-149
#D 4.6.1 9.1 8.1
#S 4.12/109/6
#T P03/1 P03/2 P03/3 P03/4 P03/5 P03/6 P03/7 P03/8 P03/9 P03/10 P03/11
   P03/12 P03/13 P03/14 P03/15

SR6.   If functions <archive structures> - <archive all structures>,
<retrieve structures> - <retrieve all structures> are called, and
name conflict occurs while conflict resolution flag has value ABANDON,
then error 405 is generated and the function is ignored.
#F 137-139 142-144
#D 4.7 4.8 9.1 8.1
#S 4.12/109/6
#T P04/1 P04/2 P04/3 P04/4 P04/5 P04/6 P04/7 P04/8 P04/9

SR7.   If functions <archive structures> - <archive all structures>
are called, and the archive file is full, then warning error 406 is
generated and any structures that were archived were archived in total.
#F 137-139
#D 9.1 8.1
#S 4.12/109/6
#T

SR8.   If functions <delete structures from archive>, <delete structure
networks from archive> are called, and some of the specified structures
do not exist on the archive file, then warning error 407 is generated.
#F 147 148
#D 9.1 9.1.1 8.1
#S 4.12/109/6
#T P05/1 P05/2 P05/3

SR9.   If functions <retrieve structures>, <retrive structure networks>
are called, and some of the specified structures do not exist on the
archive file, then warning error 408 is generated and PHIGS will create
empty structure in the place.
#F 142 143
#D 9.1 9.1.1 8.1
#S 4.12/109/6
#T P06/1 P06/2 P06/3
 
LOCAL DICTIONARY:
 
  Functions ---
  135: poparf  <open archive file>
  136: pclarf  <close archive file>
  137: parst   <archive structures>
  138: parsn   <archive structure networks>
  139: parast  <archive all structures>
  141: prsid   <retrieve structure identifiers>
  142: prest   <retrieve structures>
  143: presn   <retrieve structure networks>
  144: prast   <retrieve all structures>
  147: pdstar  <delete structures from archive>
  148: pdsnar  <delete structure networks from archive>
  149: pdasar  <delete all structures from archive>
 
  Data Structures ---
  2  ...  phigs_description_table
  2.4  ...  maximum_number_of_simultaneously_open_archive_files
  4  ...  phigs_state_list
  4.6  ...  set_of_open_archive_files
  4.6.1  ...  archive_file
  4.6.2  ...  archive_file_identifier
  4.7  ...  archival_conflict_resolution_flag
  4.8  ...  retrieval_conflict_resolution_flag
  8  ...  phigs_error_state_list
  8.1  ...  error_state
  9  ...  archive
  9.1  ...  archive_file
  9.1.1  ...  structure_identifier
 


PROGRAM 1: Error 401 handled by system

CHARACTERISTICS: nnny

OPERATOR SCRIPT:
This program uses the system default error handler.  The usual
means of invoking PVT programs links in a user-defined error handler.
Be sure to use the special mechanism provided (normally the "phfe" or
"phce" command) for invoking programs without the user-defined error
handler, since it overrides the system handler.

The general idea of this test is that errors are generated and the
resulting error messages from the system default error handler are
displayed so that you can verify their contents.

The program needs to display the contents of the error file one message at
a time .  If the system has a consistent message header (as specified to
INITPH), this is done automatically.  If not, you are prompted to say
whether the entire message has been displayed, since one message may occupy
several records.  The program will keep displaying successive records
until the entire message is visible.

Once the entire error message is displayed, you must enter the function
that  generated the corresponding error as reported in the message.  You
may identify the function either by its full generic name ("polyline 3"),
or by its unique number as specified in Fortran and C bindings (these are
the same). E.g. instead of typing "polyline 3", you can enter "8".  If the
message does not identify the function, enter a negative number to signify
this.

The error message may  or may not specify the numeric code of the error.
If so, simply enter the code as prompted.  If not, enter "n".  The program
will then display the standard wording for the error (there may be several
possible wordings, since a given condition may sometimes generate one of
several errors).  If the actual message is accurate with respect to the
standard wording (has the same meaning), enter "y", otherwise "n".

This is a passive test, but take care to invoke it so as to link
in the standard PVT user-defined error handler.  Since this is
the mode in which the non-error-handling tests are executed, this
program should be invoked in the normal way.

DESIGN:
Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the system-defined error handler should
call <error logging> to write in error message on the error file.

Use <inquire phigs facilities> to get maximum number of simultaneously
open archive files, open maximum number of archive files. Then open one
more archive file to test if function 135 generates error 401: ignoring
function, opening this archive file would exceed the maximum number of
simultanously open archive files.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

Use <inquire phigs facilities> to get:
    maxarf = maximum number of simultaneously open archive files
for ix = 1, maxarf
    <open archive file> with archive file id = ix
next ix
<open archive file> with archive file id = maxarf+1: signals error
use <inquire archive file> to get:
    numarf = number of archive files
TEST: #SR 2
      "If <open archive file> signals an error because opening this archive
       file would exceed the maximum number of simultaneously open archive
       files, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        archive state = open and
                        numarf = maxarf)

for ix = 1, maxarf
    <close archive file> with ix
next ix

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 2
      "If <open archive file> is called and opening this archive file
       would exceed the maximum number of simultaneously open archive
       files, it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 1


PROGRAM 2: Error 402 handled by system

CHARACTERISTICS: nnny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:
Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the system-defined error handler should
call <error logging> to write in error message on the error file.

Open one archive file first, then open another archive file with the same
identifier as first one to test if function 135 generates error 402: ignoring
function, archive file identifier already in use.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

arid = 11
<open archive file> with archive file id=arid
<open archive file> with archive file id=arid: signals error
Use <inquire archive files> to get:
     narf  = number of open archive files
     arids = list of archive identifiers
     arnms = list of archive file names
TEST: #SR 3
      "If <open archive file> signals an error because the archive file
       identifier is already in use, it should not cause any other effect."
pass/fail depending on (system state = phigs open and
                        archive file state = open and
                        narf = 1  and  arids(1)=arid  and arnms(1)=arnm)
<close archive file> arid

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 3
      "If <open archive file> is called and the archive file identifier
       is already in use, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 2


PROGRAM 3: Error 404 handled by system

CHARACTERISTICS: nnny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:
Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the system-defined error handler should
call <error logging> to write in error message on the error file.

Not open any archive file to test if functions 136,137,141,142,144,147
generates error 404 and/or 7; open one archive file with archive file
identifier arid, call functions 138,139,143,148,149 with archive file
identifier other than arid to test  if those functions generate error 404
and/or 7: ignoring function, the specified archive file is not open.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

arid = 11
<open structure> 100
<ppl>
<execute structure> 101
<close structure>
<open structure> 101
<text>
<close structure>
stlist = (100, 101)

<close archive file> with archive file id=arid : signals error
TEST: #SR 5
      "If <close archive file> signals an error because the specified
       archive file is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        archive state = closed)

<archive structures> with archive file id=arid, list=stlist : signals error
TEST: #SR 5
      "If <archive structures> signals an error because the specified
       archive file is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        archive state = closed)

<retrieve structure identifiers> with archive file id=arid : signals error

<retrieve structures> with archive file id=arid: signals error

<retrieve all structures> with archive file id=arid: signals error
TEST: #SR 5
      "If <retrieve all structures> signals an error because the
       specified archive file is not open, it should not cause any
       other effect."
pass/fail depending on (system state = PHIGS-open and
                        archive state = closed)

<delete structures from archive> with archive file id=arid: signals error

<open archive file> with archive file id=arid, archive file name=arnm
arid1 = arid+1
<archive structure networks> with archive file id=arid: signals error
use <inquire archive files> to get:
     numarf = number of archive file
     idlist = list of archive file identifiers
     nmlist = list of archive file names

<archive all structures> with archive file id=arid1: signals error

<retrieve structure networks> with archive file id=arid1: signals error

<delete structure networks from archive> with archive file id=arid1:
     signals error

<delete all structures from archive> with archive file id=arid1: signals error
TEST: #SR 5
      "If <delete all structures from archive> signals an error
       because the specified archive file is not open, it should not
       cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        archive state = open and
                        numarf = 1 and idlist(1)=arid and nmlist(1)=arnm)

<close archive file> arid

*** *** ***   Results of system-defined error handling  *** *** ***

TEST: #SR 5
      "If <close archive file> is called and the specified archive file
       is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <archive structures> is called and the specified archive file
       is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <retrieve structure identifiers> is called and the specified archive
       file is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <retrieve structures> is called and the specified archive file
       is not open, it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <retrieve all structures> is called and the specified archive file
       is not open, it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <delete structures from archive> is called and the specified archive
       file is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <archive structure networks> is called and the specified archive
       file is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <archive all structures> is called and the specified archive file
       is not open, it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <retrieve structure networks> is called and the specified archive
       file is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <delete structure networks from archive> is called and the
       specified archive file is not open, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 5
      "If <delete all structures from archive> is called and the specified
       archive file is not open, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 3


PROGRAM 4: Error 405 handled by system

CHARACTERISTICS: nnny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:
Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the system-defined error handler should
call <error logging> to write in error message on the error file.

Set conflict resolution flag to value ABANDON, archive or retrieve a list of
structures which makes name conflict to test if functions 137,138,139,
142,143,144 generate error 405: ignoring function, name conflict occured
while conflict resolution flag has value ABANDON.

*** *** ***  Generate errors; test absence of side effects  *** *** ***
arid = 11
<open structure> 100
<ppl>
<execute structure> 101
<close structure>
<open structure> 101
<text>
<close structure>

<set conflict resolution> to ABANDON for both archival conflict resolution
     and retrieval conflict resolution

<open archive file> with archive file id=arid

<archive all structures> with archive file id=arid

stlist = (100)
<archive structures> with archive file id=arid, list=stlist: signals error
Use <inquire all conflicting structures> to get:
    nstcft = number of structures exist both at archive file and CSS
    stcflt = list of structures exist both at archive file and CCS
TEST: #SR 6
      "If <archive structures> signals an error because name conflict occurs
       while conflict resolution flag has value ABANDON, it should not cause
       any other effect."
pass/fail depending on (system state = PHIGS-open  and
                        archive state = open       and
                        nstcft=2   and stcflt=(100,101))

<archive structure networks> with archive file id=arid, list=stlist:
    signals error

<archive all structures> with archive file id=arid: signals error

<retrieve structures> with archive file id=arid, list=stlist: signals error

<retrieve structure networks> with archive file id=arid, list=stlist:
    signals error
Use <inquire conflictig structure in network> to get:
    nstcft = number of structures in both CSS and archive file
    stcflt = list of structures in both CSS and archive file
TEST: #SR 6
      "If <retrieve structure networks> signals an error because name
       conflict occurs while conflict resolution flag has value ABANDON,
       it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open   and
                        archive state = open        and
                        nstcft=2  and stcflt=(100,101))


<delete structure> 100
<retrieve all structures> with archive file id=arid: signals error
TEST: #SR 6
      "If <retrieve all structures> signals an error because name
       conflict occurs while conflict resolution flag has value ABANDON,
       it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open   and
                        archive state = open        and
                        CSS contains only structure #101)

<close archive file> arid

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 6
      "If <archive structures> is called and name conflict occurs while
       conflict resolution flag has value ABANDON,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 6
      "If <archive structure networks> is called and name conflict
       occurs while conflict resolution flag has value ABANDON,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 6
      "If <archive all structures> is called and name conflict occurs while
       conflict resolution flag has value ABANDON,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 6
      "If <retrieve structures> is called and name conflict occurs while
       conflict resolution flag has value ABANDON,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 6
      "If <retrieve structure networks> is called and name conflict
       occurs while conflict resolution flag has value ABANDON,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 6
      "If <retrieve all structures> is called and name conflict occurs
       while conflict resolution flag has value ABANDON,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 4


PROGRAM 5: Error 407 handled by system

CHARACTERISTICS: nnny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:
Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the system-defined error handler should
call <error logging> to write in error message on the error file.

Archive some structures to an archive file, then delete more structures
from archive file to test if functions 147,148 generate error 407: warning,
some of the specified structures do not exist on the archive file.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

arid = 11
<open archive file> with archive file id=arid

<open structure> 100
<ppl>
<execute structure> 101
<close structure>
<open structure> 101
<text>
<close structure>

<archive all structures> with archive file id=arid
stlist = (100,101,102)
<delete structures from archive> with archive file id=arid, list=stlist:
     signals error
<delete structures> 100, 101
<retrieve all structures> with archive file id=arid
Use <inquire structure identifiers> to get:
    nstid = number of structure identifiers
TEST: #SR 8
      "If <delete structures from archive> issues a warning because
       some of the specified structures do not exist on the archive
       file, it should ignore the structures that do not exist."
pass/fail depending on (system state = PHIGS-open  and
                        archive state = open       and
                        nstid = 0)

<open structure> 100
<ppl>
<execute structure> 101
<close structure>
<open structure> 101
<text>
<close structure>
<archive all structures>
stlist = (100, 101)
<delete structure networks from archive> with archive file id=arid,
     list=stlist: signals error

<close archive file> arid

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 8
      "If <delete structures from archive> is called and some of the
       specified structures do not exist on the archive file,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 8
      "If <delete structure networks from archive> is called and some
       of the specified structures do not exist on the archive file,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 5


PROGRAM 6: Error 408 handled by system

CHARACTERISTICS: nnny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:
Throughout this program, every time an error is signalled (as noted
by the tag "signals error"), the system-defined error handler should
call <error logging> to write in error message on the error file.

Archive some structures on an archive file, then retrieve more structures
from the archive file to test functions 142,143 generate error 408:
warning, some of the specified structures do not exist on the archive file,
PHIGS will create empty structure in the place.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

arid = 11
<open archive file> with archive file id=arid

<open structure> 100
<ppl>
<execute structure> 101
<close structure>
<open structure> 101
<text>
<close structure>

<archive all structures> with archive file id=arid
<delete all structures>
stlist = (100,101,102)
<retrieve structures> with archive file id=arid, list=stlist: signals error
Use <inquire structure identifiers> to get:
    nstid = number of structures
    stids = list of structures
Use <inquire structure status> with stid=102 to get:
    status = structure status indicator
TEST: #SR 9
      "If <retrieve structures> issues a warning because some of the
       specified structures do not exist on the archive file, it
       should create empty structures in their place."
pass/fail depending on (system state = PHIGS-open   and
                        archive state = open        and
                        nstid = 3  and stids = (100,101,102) and
                        status = EMPTY)

<retrieve structure networks> with archive file if=arid, list=stlist:
     signals error

<close archive file> arid

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 9
      "If <retrieve structures> is called and some of the specified
       structures do not exist on the archive file, it should write an
       accurate, self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <retrieve structure networks> is called and some of the specified
       structures do not exist on the archive file,
       it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)


END PROGRAM 6
