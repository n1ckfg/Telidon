TITLE: Workstation errors handled by system

MODULE#: 09.01.02.02

DESCRIPTION: This module tests that the functions related to workstation
generate the specified workstation error messages if they are executed in
incorrect conditions. The error is handled by a default system error
handling subroutine. Also, this module tests the requirement that no side
effects are generated.

SEMANTIC REQUIREMENTS:

SR1.   If function <open workstation> is called, and the specified connection
identifier is not recognized by the implementation, then error 50 or 55 is
generated and the function is ignored.
#F 3
#D 1.2 8.1
#S 4.12/109/6
#T

SR2.   If function <open workstation> is called, and the specified workstation
type is not recongnized by the implementation, then error 52 or 55 is
generated and the function is ignored.
#F 3
#D 1.2 2.2 8.1
#S 4.12/109/6
#T P01/1 P01/2

SR3.   If function <open workstation> is called, and the specified workstation
identifier already is in use, then error 53 is generated and the function is
ignored.
#F 3
#D 1.2 4.1.1 5.1 8.1
#S 4.12/109/6
#T P02/1 P02/2

SR4.   If functions <close workstation>-<messages>, <set polyline
representation>-<set colour model>, <set hlhsr mode>, <set view representation
3>-<set workstation viewport>, <post structure>-<unpost all structures>, <set
pick filter>-<sample string>, <flush device events>, <write item to metafile>-
<read item from metafile> are called , and the specified workstation is not
open, then error 54 or 3 is generated and the function is ignored.
#F 4-8 63-72 74 84-90 132-134 151-185 187 196-198
#D 1.2 8.1
#S 4.12/109/6
#T P03/1 P03/2 P03/3 P03/4 P03/5 P03/6 P03/7 P03/8 P03/9 P03/10 P03/11
   P03/12 P03/13 P03/14 P03/15 P03/16 P03/17 P03/18 P03/19 P03/20
   P03/21 P03/22 P03/23

SR5.   If function <open workstation> is called, and the specified workstation
cannot be opened for an implementation reason, then error 55, 50 or 52 is
generated and the function is ignored.
#F 3
#D 1.2 8.1
#S 4.12/109/6
#T

SR6.   If function <write item to metafile> is called, and the specified
workstation is not of category MO, then error 56 is generated and the function
is ignored.
#F 196
#D 6.1 6.2 8.1
#S 4.12/109/6
#T P04/1

SR7.   If functions <set view representation 3>-<set workstation viewport>
are called, and the specified workstation is of category MI, then error
57 is generated and the function is ignored.
#F 84-90
#D 6.1 6.2 8.1
#S 4.12/109/6
#T P05/1 P05/2 P05/3 P05/4 P05/5

SR8.   If functions <get item type from metafile>-<read item from metafile>
are called, and the  specified workstation is not of category MI, then error
58 is generated and the function is ignored.
#F 197-198
#D 6.1 6.2 8.1
#S 4.12/109/6
#T P06/1

SR9.   If functions <redraw all structures>-<set display update state>, <set
polyline representation>-<set colour mode>, <set hlhsr filter>, <post
stucture>-<unpost all structures> are called, and the specified workstation
does not have output capability, then error 59 is generated and the function
is ignored.
#F 5-7 63-72 74 132-134
#D 6.1 6.2 8.1
#S 4.12/109/6
#T P07/1 P07/2 P07/3 P07/4 P07/5 P07/6 P07/7 P07/8

SR10.  If functions <set pick filter>, <initialize pick 3>, <initialize pick>,
<set pick mode>, <request stroke>, <request pick>, <sample pick> are called,
and the specified workstation is not of category OUTIN, then error 60 is
generated and the function is ignored.
#F 151 160 161 168 173 176 184
#D 6.1 6.2 8.1
#S 4.12/109/6
#T P08/1

SR11.  If functions <initialize locator 3>-<initialize choice>, <intialize
string 3>-<set choice mode>, <set string mode>-<request stroke 3>, <request
valuator>, <request choice>, <request string>-<sample choice>, <sample string>,
<flush device events> are called, and the specified workstation is neither
of category INPUT nor of category OUTIN, then error 61 is generated and the
function is ignored.
#F 152-159 162-167 169-172 174 175 177-183 185 187
#D 6.1 6.2 8.1
#S 4.12/109/6
#T P09/1

SR12.  If function <open workstation> is called, and opening this workstation
would exceed the maximum number of simultaneously open workstation, then error
63 is generated and the function is ignored.
#F 3
#D 1.2 2.3 8.1
#S 4.12/109/6
#T P10/1 P10/2
 
LOCAL DICTIONARY:
 
  Functions ---
    3: popwk   <open workstation>
    4: pclwk   <close workstation>
    5: prst    <redraw all structures>
    6: puwk    <update workstation>
    7: psdus   <set display update state>
    8: pmsg    <message>
   63: psplr   <set polyline representation>
   64: pspmr   <set polymarker representation>
   65: pstxr   <set text representation>
   66: psir    <set interior representation>
   67: psedr   <set edge representation>
   68: pspar   <set pattern representation>
   69: pscr    <set colour representation>
   70: pshlft  <set highlighting filter>
   71: psivft  <set invisibility filter>
   72: pscmd   <set colour model>
   74: pshrm   <set hlhsr mode>
   84: psvwr3  <set view representation 3>
   85: psvwr   <set view representation>
   86: psvtip  <set view transformation input priority>
   87: pswkw3  <set workstation window 3>
   88: pswkw   <set workstation window>
   89: pswkv3  <set workstation viewport 3>
   90: pswkv   <set workstation viewport>
  132: ppost   <post structure>
  133: pupost  <unpost structure>
  134: pupast  <unpost all structures>
  151: pspkft  <set pick filter>
  152: pinlc3  <initialize locator 3>
  153: pinlc   <initialize locator>
  154: pinsk3  <initialize stroke 3>
  155: pinsk   <initialize stroke>
  156: pinvl3  <initialize valuator 3>
  157: pinvl   <initialize valuator>
  158: pinch3  <initialize choice 3>
  159: pinch   <initialize choice>
  160: pinpk3  <initialize pick 3>
  161: pinpk   <initialize pick>
  162: pinst3  <initialize string 3>
  163: pinst   <initialize string>
  164: pslcm   <set locator mode>
  165: psskm   <set stroke mode>
  166: psvlm   <set valuator mode>
  167: pschm   <set choice mode>
  168: pspkm   <set pick mode>
  169: psstm   <set string mode>
  170: prqlc3  <request locator 3>
  171: prqlc   <request locator>
  172: prqsk3  <request stroke 3>
  173: prqsk   <request stroke>
  174: prqvl   <request valuator>
  175: prqch   <request choice>
  176: prqpk   <request pick>
  177: prqst   <request string>
  178: psmlc3  <sample locator 3>
  179: psmlc   <sample locator>
  180: psmsk3  <sample stroke 3>
  181: psmsk   <sample stroke>
  182: psmvl   <sample valuator>
  183: psmch   <sample choice>
  184: psmpk   <sample pick>
  185: psmst   <sample string>
  187: pflush  <flush device events>
  196: pwitm   <write item to metafile>
  197: pgtitm  <get item type from metafile>
  198: prditm  <read item from metafile>
 
  Data Structures ---
  1  ...  operating_state
  1.2  ...  workstation_state
  2  ...  phigs_description_table
  2.2  ...  list_of_available_workstation_types
  2.3  ...  maximum_number_of_simultaneously_open_workstations
  4  ...  phigs_state_list
  4.1  ...  set_of_open_workstations
  4.1.1  ...  workstation_identifier
  5  ...  workstation_state_list
  5.1  ...  workstation_identifier
  6  ...  workstation_description_table
  6.1  ...  workstation_type
  6.2  ...  workstation_category
  8  ...  phigs_error_state_list
  8.1  ...  error_state
 


PROGRAM 1: Error 52 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
This program uses the system default error handler.  The usual
means of invoking PVT programs links in a user-defined error handler.
Be sure to use the special mechanism provided (normally the "phfe" or
"phce" command) for invoking programs without the user-defined error
handler, since it overrides the system handler.

The general idea of this test is that errors are generated and the
resulting error messages from the system default error handler are
displayed so that you can verify their contents.

The program needs to display the contents of the error file one message at
a time.  If the system has a consistent message header (as specified to
INITPH), this is done automatically.  If not, you are prompted to say
whether the entire message has been displayed, since one message may occupy
several records.  The program will keep displaying successive records
until the entire message is visible.

Once the entire error message is displayed, you must enter the function
that  generated the corresponding error as reported in the message.  You
may identify the function either by its full generic name ("polyline 3"),
or by its unique number as specified in Fortran and C bindings (these are
the same). E.g. instead of typing "polyline 3", you can enter "8".  If the
message does not identify the function, enter a negative number to signify
this.

The error message may  or may not specify the numeric code of the error.
If so, simply enter the code as prompted.  If not, enter "n".  The program
will then display the standard wording for the error (there may be several
possible wordings, since a given condition may sometimes generate one of
several errors).  If the actual message is accurate with respect to the
standard wording (has the same meaning), enter "y", otherwise "n".

DESIGN:

Throughout this program, every time an error is signalled, the system-defined
error handler should call <error logging> to write in error message on
the error file.

Also, throughout this program, this is what is meant by
   "operator verifies error nmessage":
display next error message in error file to operator
OPQA/according to the error message, which function generated the error?
if (operator response = expected function) then
   OPQA/if error message identifies error code, enter it, else "n"
   if (operator response = "n") then
      display standard error wording(s) to operator
      OPQA/does error meaage match standard wording?
      pass/fail depending on (operator response = yes)
   else
      pass/fail depending on (operator response = expected code)
   endif
else
   fail
   informative message on missing/incorrect function
endif

Use <inquire list of available workstation types> to determine
  mxtype = maximum workstation type

<open workstation> using type = mxtype+1: signals error

TEST: #SR 2
      "If <open workstation> signals an error because the workstation
       type is not recognized by the implementation, it should not
       cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = closed)

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 2
      "If <open workstation> is called and the workstation type is not
       recognized by the implementation, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 1


PROGRAM 2: Error 53 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:

Throughout this program, every time an error is signalled, the
system-defined error handler should call <error logging> to write in
error message on the error file.

Also, throughout this program, this is what is meant by
   "operator verifies error nmessage":
display next error message in error file to operator
OPQA/according to the error message, which function generated the error?
if (operator response = expected function) then
   OPQA/if error message identifies error code, enter it, else "n"
   if (operator response = "n") then
      display standard error wording(s) to operator
      OPQA/does error meaage match standard wording?
      pass/fail depending on (operator response = yes)
   else
      pass/fail depending on (operator response = expected code)
   endif
else
   fail
   informative message on missing/incorrect function
endif

<open workstation> twice with same parameters to test if error 53 is generated:
ignoring function, workstation identifier already is in use.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

call MULTWS to get number of all accessible workstations : nwkall
call MULTWS to get
      workstation identifier: owkid(1:nwkall)
      connection identifier:  oconid(1:nwkall)
      workstation type :      owtype(1:nwkall)
      for every accessible workstation

for ix = 1, nwkall
   <open workstation> with owkid(ix), oconid(ix), owtype(ix)
   <open workstation> with owkid(ix), oconid(ix), owtype(ix): signals error

TEST: #SR 3
      "If <open workstation> signals an error because the specified
       workstation identifier is in use, it should not cause any other
       effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open)
next ix

*** *** ***  Results of system-defined error handling  *** *** ***

for ix = 1, nwkall
TEST: #SR 3
      "If <open workstation> is called and the specified workstation
       identifier is in use, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)
next ix

END PROGRAM 2


PROGRAM 3: Error 54 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:

Throughout this program, every time an error is signalled, the system-defined
error handler should call <error logging> to write in error message on
the error file.

Also, throughout this program, this is what is meant by
   "operator verifies error nmessage":
display next error message in error file to operator
OPQA/according to the error message, which function generated the error?
if (operator response = expected function) then
   OPQA/if error message identifies error code, enter it, else "n"
   if (operator response = "n") then
      display standard error wording(s) to operator
      OPQA/does error meaage match standard wording?
      pass/fail depending on (operator response = yes)
   else
      pass/fail depending on (operator response = expected code)
   endif
else
   fail
   informative message on missing/incorrect function
endif

Not open workstation with workstation identifier wkid to test if
functions 3,4,5,64,67,68,73,83,85,112 with workstation identifier wkid
generate error 54: ignoring function, the specified workstation is not open.
Then open workstation with wkid to test if function 4,6,67,87,111 with
workstation identifier wkid+1 generate error 54.

*** *** ***  Generate errors; test absence of side effects  *** *** ***

wkid = workstation identifier
<close workstation> with wkid: signals error
TEST: #SR 4
      "If <close workstation> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = closed)

<redraw all structures> with wkid, PALWAY: signals error
TEST: #SR 4
      "If <redraw all structures> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = closed)

<update workstation> with wkid, PPERFO: signals error
TEST: #SR 4
      "If <update workstation> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = closed)

<set text representation> with wkid,1,1,PSTRP,1.0,0.1,1: signals error
TEST: #SR 4
      "If <set text representation> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = closed)

colia(1,1) = pattern colour index array
colia = {1, 1}
<set pattern representation> with wkid,1,1,1,1,1,1,1,colia: signals error

cspec = colour specification
cspec = {1.,0.,0.,0.,0.,1.}
<set colour representation> with wkid, 1, 6, cspec: signals error
<set hlhsr mode> with wkid, 0: signals error

vwormt = view orientation matrix
set vwormt(4,4) to identity matrix
vwmpmt = view mapping matrix
set vwmpmp(4,4) to identity matrix
vwcplm = view clipping limit
set vwcplm(6) to {0.,1.,0.,1.,0.,1.}
xyclpi = x-y clipping indicator
set xyclpi to  clipping
bclipi = back clipping indicator
set bclipi to clipping
fclipi = front clipping indicator
set fclipi to clipping
<set view representation 3> with wkid, 1, vwormt, vwmpmt, vwcplm, xyclpi,
                                 bclipi, fclipi: signals error
<set view transformation input priority> with wkid, 1, 1, higher: signals error
<open structure> 101
<unpost structure> with wkid, 101: signals error
TEST: #SR 4
      "If <unpost structure> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = closed and
                        structure state = open)
<close structure>

<open workstation> with wkid, conid, wtype
<redraw all structures> with wkid+1: signals error
TEST: #SR 4
      "If <redraw all structures> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open)

<set display update state> with wkid+1: signals error
<set pattern representation> with wkid+1,1,1,1,1,1,1,1,colia: signals error
<set workstation window> with wkid+1,0.,1.,0.,1.: signals error
TEST: #SR 4
      "If <set workstation window> signals an error because the specified
       workstation is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open)
<open structure> 101
<post structure> with wkid+1: signals error
TEST: #SR 4
      "If <post structure> signals an error because the specified workstation
       is not open, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open)
<close structure>
<close workstation> wkid

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 4
      "If <close workstation> is called and the specified workstation is not
       open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <redraw all structures> is called and the specified workstation
       is not open, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <update workstation> is called and the specified workstation is not
       open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set text representation> is called and the specified workstation is
       not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set pattern representation> is called and the specified
       workstation is not open, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set colour representation> is called and the specified workstation
       is not open, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set hlhsr mode> is called and the specified workstation is
       not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set view representation 3> is called and the specified workstation
       is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set view transformation input priority> is called and the specified
       workstation is not open, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <unpost structure> is called and the specified workstation is not
       open, it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <redraw all structures> is called and the specified workstation
       is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set display update state> is called and the specified workstation
       is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set pattern representation> is called and the specified
       workstation is not open, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <set workstation window> is called and the specified workstation
       is not open, it should write an accurate, self-identifying error
       message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 4
      "If <post structure> is called and the specified workstation is not
       open, it should write an accurate, self-identifying error message
       on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 3


PROGRAM 4: Error 56 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for program 1.

DESIGN:

TEST: #SR 6
      "Test for error 56 (writing to workstation not of category MO)
       not yet available."
pass

END PROGRAM 4


PROGRAM 5: Error 57 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for program 1.

DESIGN:

Throughout this program, every time an error is signalled, the system-defined
error handler should call <error logging> to write in error message on
the error file.

Also, throughout this program, this is what is meant by
   "operator verifies error nmessage":
display next error message in error file to operator
OPQA/according to the error message, which function generated the error?
if (operator response = expected function) then
   OPQA/if error message identifies error code, enter it, else "n"
   if (operator response = "n") then
      display standard error wording(s) to operator
      OPQA/does error meaage match standard wording?
      pass/fail depending on (operator response = yes)
   else
      pass/fail depending on (operator response = expected code)
   endif
else
   fail
   informative message on missing/incorrect function
endif

Check the category of all accessible workstations. For all workstations
with category of MI, test if functions 84, 85, 87 and 89 generate
error 57: ignoring function, the specified workstation is
of category MI. If there is no workstation with the category of MI,
skip the test.

*** *** ***  Generate errors; test absence of side effects  *** *** ***



call MULTWS to get number of workstations with category MI: nwkmi
if (nwkmi = 0)
   informational message: There is no accessible workstation with
       category of MI, the test is skipped.
   return
endif

call MULTWS to get an MI workstation:
   workstation identifier: owkid
   connection identifier:  oconid
   workstation type:       owtype

rotmt2 = identity matrix
mapmt2 = identity matrix
limit2 = {0.,1.,0.,1.}

<open workstation> with owkid,  oconid, owtype
<set view representation> with owkid,1,rotmt2,mapmt2,limit2,0:
        signals error
TEST: #SR 7
      "If <set view representation> signals an error because the specified
       workstation is of category MI, it should not cause any other
       effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open)

<set view transformation input priority> with owkid, 1, 1, higher:
        signals error
<set workstation window> with owkid, limit: signals error
limit2 = {0.,1.,0.,1.}
<set workstation viewport> with owkid, limit2: signals error
<close workstation> owkid

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 7
      "If <set view representation> is called and the specified workstation
       is of category MI, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 7
      "If <set view transformation input priority> is called and the specified
       workstation is of category MI, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 7
      "If <set workstation window> is called and the specified workstation is
       of category MI, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 7
      "If <set workstation viewport> is called and the specified workstation
       is of category MI, it should write an accurate, self-identifying
       error message on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 5


PROGRAM 6: Error 58 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for program 1.

DESIGN:

TEST: #SR 8
      "Test for error 58 (metafile retrieval from workstation not of
       category MI) not yet available."
pass

END PROGRAM 6


PROGRAM 7: Error 59 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for program 1.

DESIGN:

Throughout this program, every time an error is signalled, the system-defined
error handler should call <error logging> to write in error message on
the error file.

Also, throughout this program, this is what is meant by
   "operator verifies error nmessage":
display next error message in error file to operator
OPQA/according to the error message, which function generated the error?
if (operator response = expected function) then
   OPQA/if error message identifies error code, enter it, else "n"
   if (operator response = "n") then
      display standard error wording(s) to operator
      OPQA/does error meaage match standard wording?
      pass/fail depending on (operator response = yes)
   else
      pass/fail depending on (operator response = expected code)
   endif
else
   fail
   informative message on missing/incorrect function
endif

Check the category of all accessible workstations. For all workstations
with category of neither OUTPUT, OUTIN nor MO, test if functions 5,62,64,
66,70 generate error 59: ignoring function, the specified workstation
does not have output capability. If there is no workstation with the
category of neither OUTPUT, OUTIN nor MO, skip the test.

*** *** ***  Generate errors; test absence of side effects  *** *** ***



call MULTWS to get number of workstations with category of neither
OUTPUT, OUTIN, nor MO: nwknot
if (nwknot = 0)
     call INMSG ('There is no workstation with category of
                  OUTPUT, OUTIN or MO, this test is skipped.')
     return
endif

call MULTWS to get random
            workstation identifier: owkid
            connection identifier:  oconid
            workstation type:       owtype

<open workstation> with owkid, oconid, owtype
<update workstation> with owkid: signals error

<set polyline representation> with owkid, 1, 1, 1.0, 1: signals error
<set text representation> with owkid, 1, 1, STRING, 1.0, 1.0, 0:
     signals error
<set edge representation> with owkid,1,OFF,1,1.0,0: signals error

inclusive set 2 = inset2 = {1,5,2}
exclusive set 2 = exset2 = {4}
<set invisibility filter> with owkid, inset2, exset2:
  signals error

<set colour model> with owkid, RGB: signals error
<open structure> 101
<post structure> with owkid, 100, 0.5: signals error
TEST: #SR 9
      "If <post structure> signals an error because the workstation
       type does not have output capability, it should not cause any
       other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open and
                        structure state = open)
<close structure>
<close workstation> owkid

*** *** ***  Results of user-defined error handling  *** *** ***

TEST: #SR 9
      "If <update workstation> is called and the workstation type
       does not have output capability, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <set polyline representation> is called and the
       workstation type does not have output capability, it should
       write an accurate, self-identifying error message on the error
       file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <set text representation> is called and the workstation
       type does not have output capability, it should write an
       accurate, self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <set edge representation> is called and the workstation
       type does not have output capability, it should write an
       accurate, self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <set invisibility filter> is called and the workstation
       type does not have output capability, it should write an
       accurate, self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <set colour model> is called and the workstation type
       does not have output capability, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

TEST: #SR 9
      "If <post structure> is called and the workstation type does
       not have output capability, it should write an accurate,
       self-identifying error message on the error file."
pass/fail depending on (operator verifies error message)

END PROGRAM 7


PROGRAM 8: Error 60 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:

TEST: #SR 10
      "Test for error 60 (using pick on workstation not of category
       OUTIN) not yet available."
pass

END PROGRAM 8


PROGRAM 9: Error 61 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:

TEST: #SR 11
      "Test for error 61 (graphical input from workstation not of
       category OUTIN or INPUT) not yet available."
pass

END PROGRAM 9


PROGRAM 10: Error 63 handled by system

CHARACTERISTICS: ynny

OPERATOR SCRIPT:
See OPERATOR SCRIPT for Program 1.

DESIGN:

Throughout this program, every time an error is signalled, the system-defined
error handler should call <error logging> to write in error message on
the error file.

Also, throughout this program, this is what is meant by
   "operator verifies error nmessage":
display next error message in error file to operator
OPQA/according to the error message, which function generated the error?
if (operator response = expected function) then
   OPQA/if error message identifies error code, enter it, else "n"
   if (operator response = "n") then
      display standard error wording(s) to operator
      OPQA/does error meaage match standard wording?
      pass/fail depending on (operator response = yes)
   else
      pass/fail depending on (operator response = expected code)
   endif
else
   fail
   informative message on missing/incorrect function
endif

*** *** ***  Generate errors; test absence of side effects  *** *** ***

call MULTWS to get number of all accessible workstations: nwkall
Use <inquire phigs facilities> to determine:
   maxwk = maximum number of simultanenously open workstations

If (nwkall <= maxwk) then
    call INMSG ('The number of all accessible workstations
                 is less than or equal to maximum number of
                 simultaneously open workstations, this test is skipped.)
    return
endif

for ix = 1 to maxwk+1
   call MULTWS to get
      workstation identifier: owkid
      connection identifier:  oconid
      workstation type:       owtype
   if (ix <= maxwk) then
      <open workstation> with owkid, oconid, owtype
   else
      <open workstation> with owkid, oconid, owtype: signals error
   endif
next ix

<inquire set of open workstations> to get # open workstations
TEST: #SR 12
      "If <open workstation> signals an error because it would
       exceed the maximum number of simultaneously
       open workstations, it should not cause any other effect."
pass/fail depending on (system state = PHIGS-open and
                        workstation state = open and
                        # open workstations = maxwk)

*** *** ***  Results of system-defined error handling  *** *** ***

TEST: #SR 12
      "If <open workstation> is called and it would exceed the maximum
       number of simultaneously open workstations, it should
       write an accurate, self-identifying error message on the error
       file."
pass/fail depending on (operator verifies error message)

END PROGRAM 10


