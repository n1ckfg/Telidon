TITLE: Polyline - individual attributes

MODULE#: 04.02.01.01

DESCRIPTION: This module tests the individual polyline
attributes.  These values control the appearance of polylines
when they are under individual (as opposed to bundled) control.

SEMANTIC REQUIREMENTS:

*** *** ***   Polyline attribute inquiry   *** *** ***

SR1.  If current element is linetype, linewidth scale factor, or
polyline colour index, then <inquire current element type and
size> returns the appropriate element type and size.
#F 303
#D 7.3.2.2.1 7.3.2.2.2 7.3.2.2.3
#S 4.4.4/29/5
#T P01/1 P01/3 P01/5

SR2.  If current element is linetype, linewidth scale factor, or
polyline colour index, then <inquire current element content>
returns the associated value for that element.
#F 304
#D 7.3.2.2.1 7.3.2.2.2 7.3.2.2.3
#S 4.4.4/29/5
#T P01/2 P01/4 P01/6

*** *** ***   Polyline attribute traversal binding   *** *** ***

SR3.  Upon traversal of a "polyline" or "polyline 3" element, the
current linetype, linewidth scale factor, and polyline colour
index in the PTSL are bound to the resulting primitive.
#F 30 31 32
#D 3.1.2 3.1.3 3.1.4 7.3.1.1 7.3.1.2
#S 4.5.2/38/3 4.5.2/40/3
#T P02/1 P02/2 P02/3 P02/4 P02/6 P02/7 P02/8 P02/9 P02/10 P02/11 P03/1
   P03/2 P03/3 P03/4 P03/5 P03/6 P03/7 P03/8 P03/9 P03/10 P04/1 P04/2

*** ***   Linetype: element creation   *** ***

SR4.  <Set linetype> creates a "set linetype" element (in the
open structure), whose associated value is taken from the
function's parameter.
#F 30
#D 7.3.2.2.1
#S 4.4.1/23/1 4.5.2/38/3
#T P01/1 P01/2 P02/1 P02/2 P02/3 P02/4 P03/1 P03/2 P03/3 P03/4

*** ***   Linetype: effect during traversal   *** ***

SR5.  Upon traversal of a "set linetype" element, the current
linetype entry in the PHIGS traversal state list (PTSL) is set to
the element's associated value.
#F 30
#D 3.1.2 7.3.2.2.1
#S 4.5.2/38/3
#T P02/1 P02/2 P02/3 P02/4 P03/1 P03/2 P03/3 P03/4 P04/1

SR6.  When a polyline is displayed, if its bound linetype is
available on the workstation and its bound linetype ASF is
INDIVIDUAL, then the appearance of the linetype agrees with the
documented specifications.
#F 30 262
#D 3.1.2 3.1.5 6.10.1.1 6.10.1.2
#S 4.5.2/39/7 4.5.3/43/5
#T P02/1 P02/2 P02/3 P02/4 P03/1 P03/2 P03/3 P03/4 P04/1

SR7.  When a polyline is displayed, if its bound linetype is not
available on the workstation and its bound linetype ASF is
INDIVIDUAL, then linetype 1 (solid) is used to display the
polyline.
#F 30 262
#D 3.1.2 3.1.5 6.10.1.1 6.10.1.2
#S 4.5.2/39/7 4.5.2/43/3
#T P02/2 P03/2

SR8.  When available on the workstation to which posted,
linetypes 1 through 4 appear as solid, dashed, dotted, and
dashed-dotted lines, respectively.
#F
#D 6.10.1.1 6.10.1.2
#S 4.5.3/43/5
#T P02/1 P02/2 P03/1 P03/2

SR9.  When available on the workstation to which posted,
linetypes greater than 4 appear as specified in the ISO
register.
#F
#D 6.10.1.1 6.10.1.2
#S 4.1.2/15/2 4.5.3/43/5
#T P02/3 P03/3

SR10.  When available on the workstation to which posted,
linetypes less than 1 appear as specified in the implementor
documentation.
#F
#D 6.10.1.1 6.10.1.2
#S 4.1.1/15/1 4.5.3/43/5
#T P02/4 P02/5 P03/4

*** ***   Linetype: network traversal   *** ***

SR11.  At the start of the top-level traversal of a structure
network (not a sub-traversal caused by execute structure), the
current linetype of the PTSL is set to 1.
#F
#D 2.10.2 3.1.2
#S 4.4.3/26/2 4.4.3/28/1 6.3/309/1
#T P04/1

SR12.  As part of the PTSL, the current linetype is saved (but
not changed) by execute structure and then, upon completion of
the sub-traversal of the invoked network, restored to the saved
value.
#F 113
#D 3.1.2
#S 4.4.3/28/1
#T P04/1

***   Linewidth scale factor: element creation   ***

SR13.  <Set linewidth scale factor> creates a "set linewidth scale
factor" element (in the open structure), whose associated value
is taken from the function's parameter.
#F 31
#D 7.3.2.2.2
#S 4.4.1/23/1 4.5.2/38/3
#T P01/3 P01/4 P02/6 P02/7 P02/8 P02/9 P03/5 P03/6 P03/7 P03/8

*** ***   Linewidth scale factor: effect during traversal   *** ***

SR14.  Upon traversal of a "set linewidth scale factor" element,
the current linewidth scale factor entry in the PHIGS traversal
state list (PTSL) is set to the element's associated value.
#F 31
#D 3.1.3 7.3.2.2.2
#S 4.5.2/38/3
#T P02/6 P02/7 P02/8 P02/9 P03/5 P03/6 P03/7 P03/8 P04/1

SR15.  When a polyline is displayed, if its logical linewidth (=
its bound linewidth scale factor times the workstation's nominal
linewidth) is available on the workstation and its bound
linewidth scale factor ASF is INDIVIDUAL, then the actual
linewidth agrees with the logical linewidth.
#F 31 262
#D 3.1.3 3.1.6 6.10.1.3 6.10.1.4 6.10.1.5 6.10.1.6
#S 4.5.2/39/7 4.5.3/43/6
#T P02/6 P03/5 P04/1

SR16.  When a polyline is displayed, if its logical linewidth is
not available on the workstation and its bound linewidth scale
factor ASF is INDIVIDUAL, then the actual linewidth is the
nearest available to the logical linewidth.
#F 31 262
#D 3.1.3 3.1.6 6.10.1.3 6.10.1.4 6.10.1.5 6.10.1.6
#S 4.5.2/39/7 4.5.3/43/6
#T P02/7 P02/8 P02/9 P03/6 P03/7 P03/8

*** ***   Linewidth scale factor: network traversal   *** ***

SR17.  At the start of the top-level traversal of a structure
network (not a sub-traversal caused by execute structure), the
current linewidth scale factor of the PTSL is set to 1.0.
#F
#D 2.10.3 3.1.3
#S 4.4.3/26/2 4.4.3/28/1 6.3/309/1
#T P04/1

SR18.  As part of the PTSL, the current linewidth scale factor is
saved (but not changed) by execute structure and then, upon
completion of the sub-traversal of the invoked network, restored
to the saved value.
#F 113
#D 3.1.3
#S 4.4.3/28/1
#T P04/1

***   Polyline colour index: element creation   ***

SR19.   <Set polyline colour index> creates a "set polyline colour
index" element (in the open structure), whose associated value is
taken from the function's parameter.
#F 32
#D 7.3.2.2.3
#S 4.4.1/23/1 4.5.2/38/3
#T P01/5 P01/6 P02/10 P02/11 P03/9 P03/10

*** ***   Polyline colour index: effect during traversal   *** ***

SR20.  Upon traversal of a "set polyline colour index" element,
the current polyline colour index entry in the PHIGS traversal
state list (PTSL) is set to the element's associated value.
#F 32
#D 3.1.4 7.3.2.2.3
#S 4.5.2/38/3
#T P02/10 P02/11 P03/9 P03/10 P04/2

SR21.  When a polyline is displayed, if its bound polyline colour
index is defined on the workstation and its bound polyline
colour index ASF is INDIVIDUAL, then the polyline colour
index is realized as itself.
#F 32
#D 3.1.4 3.1.7 5.15.3.1 5.15.3.2
#S 4.5.2/39/7 4.5.12/63/4
#T P02/10 P03/9 P04/2

SR22.  When a polyline is displayed, if its bound polyline colour
index is not defined on the workstation and its bound polyline
colour index ASF is INDIVIDUAL, then the polyline colour index is
realized as number 1.
#F 32
#D 3.1.4 3.1.7 5.15.3.1 5.15.3.2
#S 4.5.2/39/7 4.5.2/43/3
#T P02/11 P03/10

*** ***   Polyline colour index: network traversal   *** ***

SR23.  At the start of the top-level traversal of a structure
network (not a sub-traversal caused by execute structure), the
current polyline colour index of the PTSL is set to 1.
#F
#D 2.10.4 3.1.4
#S 4.4.3/26/2 4.4.3/28/1 6.3/309/1
#T P04/2

SR24.  As part of the PTSL, the current polyline colour index is
saved (but not changed) by execute structure and then, upon
completion of the sub-traversal of the invoked network, restored
to the saved value.
#F 113
#D 3.1.4
#S 4.4.3/28/1
#T P04/2

 
LOCAL DICTIONARY:
 
  Functions ---
   30: psln    <set linetype>
   31: pslwsc  <set linewidth scale factor>
   32: psplci  <set polyline colour index>
  113: pexst   <execute structure>
  262: pqplf   <inquire polyline facilities>
  303: pqcets  <inquire current element type and size>
  304: pqceco  <inquire current element content>
 
  Data Structures ---
  2  ...  phigs_description_table
  2.10 ...  default_polyline_attributes
  2.10.2  ...  default_linetype
  2.10.3  ...  default_linewidth_scale_factor
  2.10.4  ...  default_polyline_colour_index
  3  ...  phigs_traversal_state_list
  3.1  ...  current_polyline_attributes
  3.1.2  ...  current_linetype
  3.1.3  ...  current_linewidth_scale_factor
  3.1.4  ...  current_polyline_colour_index
  3.1.5  ...  current_linetype_asf
  3.1.6  ...  current_linewidth_scale_factor_asf
  3.1.7  ...  current_polyline_colour_index_asf
  5  ...  workstation_state_list
  5.15  ...  colour_entry
  5.15.3  ...  colour_table
  5.15.3.1  ...  colour_index
  5.15.3.2  ...  colour_specification
  6  ...  workstation_description_table
  6.10 ...  polyline_entry
  6.10.1  ...  polyline_facilities
  6.10.1.1  ...  number_of_available_linetypes
  6.10.1.2  ...  list_of_available_linetypes
  6.10.1.3  ...  number_of_available_linewidths
  6.10.1.4  ...  nominal_linewidth
  6.10.1.5  ...  minimum_linewidth
  6.10.1.6  ...  maximum_linewidth
  7  ...  structure_state_list
  7.3  ...  list_of_structure_elements
  7.3.1  ...  graphical_primitives
  7.3.1.1  ...  polyline_3
  7.3.1.2  ...  polyline
  7.3.2  ...  primitive_attributes
  7.3.2.2  ...  polyline_attributes
  7.3.2.2.1  ...  linetype
  7.3.2.2.2  ...  linewidth_scale_factor
  7.3.2.2.3  ...  polyline_colour_index
 
SEMANTIC CROSS-REFERENCES:
  04.02.05.01/SR44 04.02.05.01/SR45 04.02.05.01/SR46
 
LOCAL SUBROUTINES:

PLATTR tests polyline attributes, either individually, using the
default values for the other attributes, or in combination, using
non-default values for the others.  It forms the body of P02 and
P03, since these are very similar except for varying the
attributes individually or in combination.

NDLW attempts to set linewidth to a requested value, but not near
the default.

SHOWLW tests the rendering of a given linewidth, and returns the
pass/fail result.  The actual line is drawn using the indicated
linetype and color.  The expected linewidth is simulated with
polylines of the thinnest available linewidth.

RANLST chooses a linetype at random from the three lists of
available linetypes.

EXPPPL draws a polyline with the expected linestyle and linewidth.

PLYXF returns the appropriate y-coordinate in WC for the
ordered polylines.


PROGRAM 1: Element creation and inquiring

CHARACTERISTICS: nnnn

OPERATOR SCRIPT: passive test.

DESIGN:

Use <inquire current element content> throughout to determine:
    celval = current element value as set by program
    recval = auxiliary element values implied by the standard's
             representation conventions.

Use <inquire current element type and size> throughout to determine:
    celsiz = current element size

*** *** *** *** ***   Linetype   *** *** *** *** ***
ltval = 33
<set linetype>:
    linetype = ltval

TEST: #SR 1 4
      "<Inquire current element type and size> should return
       linetype as the type of the created element and the
       appropriate element size."
<inquire current element type and size> for current element type
pass/fail depending on
  (current_element_type = linetype and
   celsiz               = values specified by the standard)

TEST: #SR 2 4
      "<Inquire current element content> should return the standard
       representation for the linetype value."
<inquire current element content> for current element representation
pass/fail depending on
  (celval = ltval and
   recval = auxiliary values specified by the standard)

*** *** *** *** ***   Linewidth scale factor   *** *** *** *** ***
<set linewidth scale factor>:
    linewidth_scale_factor = 0.45

TEST: #SR 1 13
      "<Inquire current element type and size> should return linewidth
       scale factor as the type of the created element and the
       appropriate element size."
<inquire current element type and size> for current element type
pass/fail depending on
  (current_element_type = linewidth_scale_factor
   celsiz               = values specified by the standard)

TEST: #SR 2 13
      "<Inquire current element content> should return the standard
       representation for the linewidth scale factor value."
<inquire current element content> for current element representation
pass/fail depending on
  (celval = 0.45 and
   recval = auxiliary values specified by the standard)

*** *** *** *** ***   Polyline colour index   *** *** *** *** ***
<set polyline colour index>:
    polyline_colour_index = 6

TEST: #SR 1 19
      "<Inquire current element type and size> should return
       polyline colour index as the type of the created element
       and the appropriate element size."
<inquire current element type and size> for current element type
pass/fail depending on
  (current_element_type = polyline_colour_index
   celsiz               = values specified by the standard)

TEST: #SR 2 19
      "<Inquire current element content> should return the standard
       representation for the polyline colour index value."
<inquire current element content> for current element representation
pass/fail depending on
  (celval = 6 and
   recval = auxiliary values specified by the standard)

END PROGRAM 1


PROGRAM 2: Appearance of individual attributes

CHARACTERISTICS: ynny

OPERATOR SCRIPT:

MANDATORY LINETYPES: This screen should display examples of each
of the mandatory linetypes actually supported by the
implementation.  You should not consider whether all 4 are
present, but simply whether each linestyle is recognizable from
the verbal description.  Enter a list of integers which identify
the linetypes in the same order as they appear in the prompt.

UNSUPPORTED LINETYPES: This screen should display several solid
lines and one non-solid.  Identify the non-solid line.

NON-MANDATORY REGISTERED LINETYPES: This screen displays a sample
of supported registered linetypes (at most 8).  For each
displayed line, look up its linetype identifier in the ISO
register and verify that the actual appearance of the line agrees
with the ISO specification.

IMPLEMENTOR DEFINED LINETYPES: This screen displays a sample of
implementor defined linetypes (at most 8).  For each displayed
line, look up its linetype identifier in the implementor's
documentation and verify that the actual appearance of the line
agrees with the specification.

COMPLETE DOCUMENTATION FOR IMPLEMENTOR LINETYPES: No associated
picture.  Verify that all the entries in the list of available
linetypes for this workstation type are documented by the
implementor.  The list may be a subset of the documented
linetypes.

VARIOUS LINEWIDTH SCALE FACTORS: Several numbered pairs of
rectangles are drawn.  Compare the vertical sizes for each pair.
One pair should have the same size for both members.  Although
the program tries to line up the bottom of the rectangles, there
is no requirement that they be aligned, so judge only according
to size.

POSITIVE LINEWIDTH BELOW MINIMUM: as above, for VARIOUS LINEWIDTH
SCALE FACTORS.

NEGATIVE LINEWIDTH: as above, for VARIOUS LINEWIDTH SCALE
FACTORS.

POSITIVE LINEWIDTH ABOVE MAXIMUM: as above, for VARIOUS LINEWIDTH
SCALE FACTORS.

DEFINED POLYLINE COLOR INDICES: All lines but one are drawn in
the background color.  Identify the single line drawn in the
default foreground color.

UNDEFINED POLYLINE COLOR INDICES: A star is drawn with several
horizontal lines beneath it.  Normally, all of these will be the
same color as the star.  Count up and report the number of lines
which match the star in color.

DESIGN:

use <inquire polyline facilities> to determine:
  numlt  = number of available linetypes
  lavslt = list of available standard linetypes
  lavrlt = list of available registered (non-mandatory) linetypes
  lavilt = list of available implementor-defined linetypes
           (may be derived directly from linetype value, if reported
            number of linetypes < 0)
  numlw  = number of available line-widths
  nomlw  = nominal line-width (DC)
  minlw,maxlw = minimum,maximum line-width (DC)

*** *** ***   1. linetype

Use default background color=0, foreground=1

Display in random order all linetypes in lavslt

TEST: #SR 3 4 5 6 8
      "The mandatory linetypes (1-4) should be recognizable from
       their standard description."

OPQA/MANDATORY LINETYPES: List, in order, the numeric labels for
  linetypes: solid, dotted, dashed, dotted-dashed.

pass/fail depending on (all displayed linetypes correctly identified)

lunsup = list of (mostly) unsupported linetypes, contains:
  a negative unsupported type, if available (< minimum in lavilt)
  0, if not in lavilt
  a positive unsupported type (> maximum in lavrlt)
  1,
  2,3, or 4 if supported (the only non-solid one)

if (2,3,4 not available) then
   goto end_solid
endif

Display in random order linetypes from lunsup

TEST: #SR 3 4 5 6 7 8
      "Unavailable linetypes should be displayed as linetype
       number 1."

OPQA/UNSUPPORTED LINETYPES: which line is NOT solid?
pass/fail depending on (the non-solid linetype (2,3, or 4) selected)

end_solid:

regdx = size of lavrlt
if regdx < 1 skip to neg_type

if regdx < 9
   lindis = lines to be displayed = all linetypes in lavrlt
else
   lindis = lines to be displayed = 8 linetypes randomly selected
                                    from lavrlt
endif

display in order and label all linetypes in lindis

TEST: #SR 3 4 5 6 9
      "The registered non-mandatory linetypes (> 4) should
       agree with their registered description."

OPQA/NON-MANDATORY REGISTERED LINETYPES: Is each linetype
  depicted according to its numeric identifier's specification in
  the ISO register?
pass/fail depending on (operator responds "yes")

neg_type:

impdx = size of lavilt
if impdx < 1 goto end_linetype

if impdx< 9
   lindis = lines to be displayed = all linetypes in lavilt
else
   lindis = lines to be displayed = 8 linetypes randomly selected
                                    from lavilt
endif

display in order and label all linetypes in lindis

TEST: #SR 3 4 5 6 10
      "Implementor-defined linetypes (< 1) should agree with the
       descriptions supplied by the implementor."

OPQA/IMPLEMENTOR DEFINED LINETYPES: Is each linetype depicted
  according to its numeric identifier's specification in the
  implementor documentation?
pass/fail depending on (operator responds "yes")

if (impdx <= 8 or numlt < 0) then
   either all implementor linetypes already shown or
   linetype appearance derived directly from value - skip test
   goto end_linetype
endif

TEST: #SR 10
      "All reported implementor-defined linetypes available for a
       given workstation type should be documented by the
       implementor."

OPQA/COMPLETE DOCUMENTATION FOR IMPLEMENTOR LINETYPES: Are all
  these reportedly available linetypes documented by the
  implementor <lavilt> ?
pass/fail depending on (operator responds "yes")

end_linetype:

*** *** ***   2. line-width

from dialog common:
  wcpdc  = WC unit / DC unit
  qvis   = minimum distinguishable length in DC-units

Are there at least two visually distinguishable line-widths?
if (numlw = 1)              or
   (maxlw <= 1.02 * minlw)  or
   (maxlw-minlw < qvis)    then
   only one distinguishable:
   tstlw1 = first linewidth to be tested = maxlw
   tstlw2 =  last linewidth to be tested = tstlw1
   mult = 2
else
   tstlw1 = first linewidth to be tested = minlw
   tstlw2 =  last linewidth to be tested = maxlw
   if (numlw = 0) then
      continuous range of linewidths available - take 4 geometric steps
      mult = 0.9999 * ((tstlw2/tstlw1) ** 0.25)
   else
      discrete set of linewidths available - test min/max only
      mult = 0.9999 * (tstlw2/tstlw1)
   endif
endif

numpas = 0 = number of tests passed so far
thislw = tstlw1

loop thru various linewidths
next_lw:
OPQA/VARIOUS LINEWIDTH SCALE FACTORS: invoke SHOWLW subroutine to
  test requested line width = thislw
        expected line width = thislw
if abort indicated
   if (numpas < 2) then
      message about linewidth too big for the screen
      goto min_max_coerce
   else
      goto do_test_msg
   endif
elseif failure indicated
   numpas = 0
   goto do_tst_msg
endif

numpas = numpas+1
set up for next linewidth to be tested:
thislw = thislw * mult
if thislw <= tstlw2 goto next_lw

do_tst_msg:

TEST: #SR 3 13 14 15
      "Available linewidth scale factors should control the
       realized thickness of a polyline."
pass/fail depending on (numpas > 0)

min_max_coerce:

TEST: #SR 3 13 14 16
      "A requested positive linewidth scale factor below the
       minimum available should be realized as the minimum."
OPQA/POSITIVE LINEWIDTH BELOW MINIMUM: invoke subroutine SHOWLW
  to test requested line width = minlw/2
           expected line width = minlw
pass/fail depending on return code from SHOWLW

TEST: #SR 3 13 14 16
      "A requested negative linewidth scale factor should be
       realized as the minimum."
OPQA/NEGATIVE LINEWIDTH: invoke subroutine SHOWLW to test
  requested line width = -maxlw-100
   expected line width = minlw
pass/fail depending on return code from SHOWLW

OPQA/POSITIVE LINEWIDTH ABOVE MAXIMUM: invoke subroutine SHOWLW
  to test requested line width = maxlw*2
           expected line width = maxlw
if abort indicated
   message about marker size too big for the screen
else
   TEST: #SR 3 13 14 16
         "A requested linewidth scale factor above the maximum
          available should be realized as the maximum."
   pass/fail depending on return code from SHOWLW
endif

*** *** ***   3. polyline color index

TEST: #SR 3 19 20 21
      "A defined polyline color index should cause the addressed
       entry in the color table to be used when rendering a
       polyline."

bckcol = background color = realized color spec for entry #0
forcol = foreground color = realized color spec for entry #1

szcolt = maximum size of color table (including entry #0)
numlin = number of lines to be drawn = min(8, szcolt)
lncol  = random permutation of #0,#1, and numlin-2 random choices
         from entries #2 to #szcolt-1
visdx = from lncol, randomly select an entry to be made visible
        but not the one that contains 0, since this may not be
        re-settable.

for ix = 1 to numlin
   set entry lncol(ix) to bckcol
   draw line #ix with polyline colour index = lncol(ix), and label it
next ix

set entry lncol(visdx) to forcol

OPQA/DEFINED POLYLINE COLOR INDICES: which line is visible?
pass/fail depending on (response = line colored by visdx)

end_def_col:

TEST: #SR 3 19 20 22
      "An undefined polyline color index should cause entry
       number 1 in the color table to be used when rendering a
       polyline."

set entry #1 in color table opposite from BCKCOL
set entry #1 different from FORCOL - make sure undefined default
  to *current* color-rep of #1, not just a predefined color.

u1,u2,u3 = 3 undefined, positive color indices - all greater
  than maximum defined entry in color table
explct = number of explicit lines of color #1 = random integer
   from 0 to 4

draw star with color #1

display interleaved:
  three lines of color u1,u2,u3,
  explct lines of color #1

OPQA/UNDEFINED POLYLINE COLOR INDICES: How many of the horizontal
  lines are the same color as the star?
pass/fail depending on response = 3+explct

END PROGRAM 2


PROGRAM 3: Combinations of individual attributes

CHARACTERISTICS: ynny

OPERATOR SCRIPT:

MANDATORY LINETYPES: This screen should display examples of each
of the mandatory linetypes actually supported by the
implementation.  You should not consider whether all 4 are
present, but simply whether each linestyle is recognizable from
the verbal description.  Enter a list of integers which identify
the linetypes in the same order as they appear in the prompt.

UNSUPPORTED LINETYPES: This screen should display several solid
lines and one non-solid.  Identify the non-solid line.

NON-MANDATORY REGISTERED LINETYPES: This screen displays a sample
of supported registered linetypes (at most 8).  For each
displayed line, look up its linetype identifier in the ISO
register and verify that the actual appearance of the line agrees
with the ISO specification.

IMPLEMENTOR DEFINED LINETYPES: This screen displays a sample of
implementor defined linetypes (at most 8).  For each displayed
line, look up its linetype identifier in the implementor's
documentation and verify that the actual appearance of the line
agrees with the specification.

VARIOUS LINEWIDTH SCALE FACTORS: Several numbered pairs of
rectangles are drawn.  Compare the vertical sizes for each pair.
One pair should have the same size for both members.  Although
the program tries to line up the bottom of the rectangles, there
is no requirement that they be aligned, so judge only according
to size.

POSITIVE LINEWIDTH BELOW MINIMUM: as above, for VARIOUS LINEWIDTH
SCALE FACTORS.

NEGATIVE LINEWIDTH: as above, for VARIOUS LINEWIDTH SCALE
FACTORS.

POSITIVE LINEWIDTH ABOVE MAXIMUM: as above, for VARIOUS LINEWIDTH
SCALE FACTORS.

DEFINED POLYLINE COLOR INDICES: All lines but one are drawn in
the background color.  Identify the single line drawn in the
default foreground color.

UNDEFINED POLYLINE COLOR INDICES: A star is drawn with several
horizontal lines beneath it.  Normally, all of these will be the
same color as the star.  Count up and report the number of lines
which match the star in color.

DESIGN:

use <inquire polyline facilities> to determine:
  lavslt = list of available standard linetypes
  lavrlt = list of available registered (non-mandatory) linetypes
  lavilt = list of available implementor-defined linetypes
           (may be derived directly from linetype value, if reported
            number of linetypes < 0)
  numlw  = number of available line-widths
  nomlw  = nominal line-width (DC)
  minlw,maxlw = minimum,maximum line-width (DC)

call DISCOL to set distinct foreground colors in color table.

*** *** ***   1. linetype

call NDLW to set linewidth to a non-default value, preferably
  half the distance between lines to be displayed
Display in random order all linetypes in lavslt,
  with colors drawn randomly from foreground colors

TEST: #SR 3 4 5 6 8
      "The mandatory linetypes (1-4) should be recognizable from
       their standard description, even when a non-default
       linewidth or color is used."

OPQA/MANDATORY LINETYPES: List, in order, the numeric labels for
  linetypes: solid, dotted, dashed, dotted-dashed.

pass/fail depending on (all displayed linetypes correctly identified)

lunsup = list of (mostly) unsupported linetypes, contains:
  a negative unsupported type, if available (< minimum in lavilt)
  0, if not in lavilt
  a positive unsupported type (> maximum in lavrlt)
  1,
  2,3, or 4 if supported (the only non-solid one)

if (2,3,4 not available) then
   goto end_solid
endif

call NDLW to set linewidth to a non-default value, preferably
  half the distance between lines to be displayed
Display in random order linetypes from lunsup,
  with colors drawn randomly from foreground colors

TEST: #SR 3 4 5 6 7 8
      "Unavailable linetypes should be displayed as linetype
       number 1, even when a non-default linewidth or color is
       used."

OPQA/UNSUPPORTED LINETYPES: which line is NOT solid?
pass/fail depending on (the non-solid linetype (2,3, or 4) selected)

end_solid:

regdx = size of lavrlt
if regdx < 1 skip to neg_type

if regdx < 9
   lindis = lines to be displayed = all linetypes in lavrlt
else
   lindis = lines to be displayed = 8 linetypes randomly selected
                                    from lavrlt
endif

call NDLW to set linewidth to a non-default value, preferably
  half the distance between lines to be displayed
Display in order and label all linetypes in lindis,
  with colors drawn randomly from foreground colors

TEST: #SR 3 4 5 6 9
      "The registered non-mandatory linetypes (> 4) should
       agree with their registered description, even when a
       non-default linewidth or color is used."

OPQA/NON-MANDATORY REGISTERED LINETYPES: Is each linetype
  depicted according to its numeric identifier's specification in
  the ISO register?
pass/fail depending on (operator responds "yes")

neg_type:

impdx = size of lavilt
if impdx < 1 goto end_linetype

if impdx < 9
   lindis = lines to be displayed = all linetypes in lavilt
else
   lindis = lines to be displayed = 8 linetypes randomly selected
                                    from lavilt
endif

call NDLW to set linewidth to a non-default value, preferably
  half the distance between lines to be displayed
Display in order and label all linetypes in lindis,
  with colors drawn randomly from foreground colors

TEST: #SR 3 4 5 6 10
      "Implementor-defined linetypes (< 1) should agree with the
       descriptions supplied by the implementor, even when a
       non-default linewidth or color is used."

OPQA/IMPLEMENTOR DEFINED LINETYPES: Is each linetype depicted
  according to its numeric identifier's specification in the
  implementor documentation?
pass/fail depending on (operator responds "yes")

end_linetype:

*** *** ***   2. line-width

from dialog common:
  wcpdc  = WC unit / DC unit
  qvis   = minimum distinguishable length in DC-units

Are there at least two visually distinguishable line-widths?
if (numlw = 1)             or
   (maxlw <= 1.02 * minlw)  or
   (maxlw-minlw < qvis)    then
   only one distinguishable:
   tstlw1 = first linewidth to be tested = maxlw
   tstlw2 =  last linewidth to be tested = tstlw1
   mult = 2
else
   tstlw1 = first linewidth to be tested = minlw
   tstlw2 =  last linewidth to be tested = maxlw
   if (numlw = 0) then
      continuous range of linewidths available - take 4 geometric steps
      mult = 0.9999 * ((tstlw2/tstlw1) ** 0.25)
   else
      discrete set of linewidths available - test min/max only
      mult = 0.9999 * (tstlw2/tstlw1)
   endif
endif

numpas = 0 = number of tests passed so far
thislw = tstlw1

loop thru various linewidths
next_lw:
ndlnst = randomly selected linestyle
plcol  = randomly selected color index
OPQA/VARIOUS LINEWIDTH SCALE FACTORS: invoke SHOWLW subroutine to
  test requested line width   = thislw
       expected line width    = thislw
       linestyle              = ndlnst
       color index            = plcol

if abort indicated
   if (numpas < 2) then
      message about linewidth too big for the screen
      goto min_max_coerce
   else
      goto do_test_msg
   endif
elseif failure indicated
   numpas = 0
   goto do_tst_msg
endif

numpas = numpas+1
set up for next linewidth to be tested:
thislw = thislw * mult
if thislw <= tstlw2 goto next_lw

do_tst_msg:

TEST: #SR 3 13 14 15
      "Available linewidth scale factors should control the
       realized thickness of a polyline, even when a non-default
       linetype or color is used."
pass/fail depending on (numpas > 0)

min_max_coerce:

TEST: #SR 3 13 14 16
      "A requested positive linewidth scale factor below the
       minimum available should be realized as the minimum, even
       when a non-default linetype or color is used."

ndlnst = randomly selected linestyle
plcol  = randomly selected color index

OPQA/POSITIVE LINEWIDTH BELOW MINIMUM: invoke subroutine SHOWLW
  to test requested line width   = minlw/2
          expected line width    = minlw
          linestyle              = ndlnst
          color index            = plcol
pass/fail depending on return code from SHOWLW

TEST: #SR 3 13 14 16
      "A requested negative linewidth scale factor should be
       realized as the minimum, even when a non-default linetype
       or color is used."

ndlnst = randomly selected linestyle
plcol  = randomly selected color index

OPQA/NEGATIVE LINEWIDTH: invoke subroutine SHOWLW to test
   requested line width   = -maxlw-100
   expected line width    = minlw
   linestyle              = ndlnst
   color index            = plcol
pass/fail depending on return code from SHOWLW

ndlnst = randomly selected linestyle
plcol  = randomly selected color index
OPQA/POSITIVE LINEWIDTH ABOVE MAXIMUM: invoke subroutine SHOWLW
  to test requested line width   = maxlw*2
          expected line width    = maxlw
          linestyle              = ndlnst
          color index            = plcol
if abort indicated
   message about marker size too big for the screen
else
   TEST: #SR 3 13 14 16
         "A requested linewidth scale factor above the maximum
          available should be realized as the maximum, even when a
          non-default linetype or color is used."
   pass/fail depending on return code from SHOWLW
endif

*** *** ***   3. polyline color index

TEST: #SR 3 19 20 21
      "A defined polyline color index should cause the addressed
       entry in the color table to be used when rendering a
       polyline, even when a non-default linetype or linewidth is
       used."

bckcol = background color = realized color spec for entry #0
forcol = foreground color = realized color spec for entry #1

szcolt = maximum size of color table (including entry #0)
numlin = number of lines to be drawn = min(8, szcolt)
lncol  = random permutation of #0,#1, and numlin-2 random choices
         from entries #2 to #szcolt-1
visdx = from lncol, randomly select an entry to be made visible
        but not the one that contains 0, since this may not be
        re-settable.

call NDLW to set linewidth to a non-default value, preferably
  half the distance between lines to be displayed
for ix = 1 to numlin
   set entry lncol(ix) to bckcol
   draw line #ix with polyline colour index = lncol(ix), and label it,
      using linetype = random choice from lavslt,lavrlt,lavilt
next ix

set entry lncol(visdx) to forcol

OPQA/DEFINED POLYLINE COLOR INDICES: which line is visible?
pass/fail depending on (response = line colored by visdx)

end_def_col:

TEST: #SR 3 19 20 22
      "An undefined polyline color index should cause entry
       number 1 in the color table to be used when rendering a
       polyline, even when a non-default linetype or linewidth is
       used."

set entry #1 in color table opposite from BCKCOL
set entry #1 different from FORCOL - make sure undefined default
  to *current* color-rep of #1, not just a predefined color.

u1,u2,u3 = 3 undefined, positive color indices - all greater
  than maximum defined entry in color table
explct = number of explicit lines of color #1 = random integer
   from 0 to 4

draw star with color #1

call NDLW to set linewidth to a non-default value, preferably
  half the distance between lines to be displayed
display interleaved:
  three lines of color u1,u2,u3,
  explct lines of color #1, for each using linetype = random
    choice from lavslt,lavrlt,lavilt

OPQA/UNDEFINED POLYLINE COLOR INDICES: How many of the horizontal
  lines are the same color as the star?
pass/fail depending on response = 3+explct

END PROGRAM 3


PROGRAM 4: Network inheritance and initialization

CHARACTERISTICS: ynny

OPERATOR SCRIPT:

STRUCTURE NETWORK INHERITANCE FOR LINESTYLE AND LINEWIDTH: This
screen displays several left-right pairs of polylines.  Make sure
that all pairs except one have matching linestyles and linewidths.
Identify the non-matching pair.

STRUCTURE NETWORK INHERITANCE FOR POLYLINE COLOR INDEX: This
screen displays several left-right pairs of polylines.  Make sure
that all pairs except one have matching colors.  For monochrome
workstations, both the background and foreground colors must be
used, and so several lines will be drawn in the background color.
Identify the non-matching pair.

DESIGN:

*** *** ***   inheritance for linestyle and linewidth   *** *** ***

from dialog common:
qvis  = minimum distinguishable length in DC-units

get alternative linewidth values:

altlw1 should not exceed .05 to avoid overlap - distance between
  lines will be 1/15 = .06666
altlw1 = min(max scale factor, factor equivalent to .05 in WC)
altlw2 = min scale factor

if default (1.0) is near altlw1 or altlw2, set alternate so as to
maximize the smallest gap among altlw1, altlw2, and 1.0:

avg1 = (altlw1 + 1) / 2
avg2 = (altlw2 + 1) / 2
if (abs(altlw1-1) .lt. abs(avg2-1)) then
   altlw1 = avg2
elseif (abs(altlw2-1) .lt. abs(avg1-1)) then
   altlw2 = avg1
endif

set up PERM to randomize position of polylines

set up CSS:

Structure network #101 draws actual results in random order on
left side of picture.  Structure #105 draws expected results in
same random order on right side of picture, except for polyline
14 which is deliberately drawn with incorrect attributes. This
should be the only non-matching pair in the picture.

structure #101
polyline 1 (order within traversal)
execute 102
polyline 9
change-attributes: linestyle=2, linewidth=altlw1
polyline 10
set local transformation to make lines 11,12 distinguishable
  from 5,6
execute 104
re-set local transformation to identity
polyline 13
polyline 14
execute 105

structure #102
polyline 2
change-attributes: linestyle=3, linewidth=altlw2
execute 103
polyline 8

structure #103
polyline 3
change-attributes: linestyle=4, linewidth=altlw1
polyline 4
execute 104
polyline 7

structure #104
polyline 5 / 11
change-attributes: linestyle=2, linewidth=altlw2
polyline 6 / 12

Expected attributes (except #14, whose actual linestyle should be 2):

structure #105
polyline   linestyle   linewidth-scale
--------   ---------   ---------------
01         1           1.0
02         1           1.0
03         3           altlw2
04         4           altlw1
05         4           altlw1
06         2           altlw2
07         4           altlw1
08         3           altlw2
09         1           1.0
10         2           altlw1
11         2           altlw1
12         2           altlw2
13         2           altlw1
14         4           altlw1

TEST: #SR 3 5 6 11 12 14 15 17 18
      "The linestyle and linewidth attributes for the polyline
       primitive should be saved and restored by <execute
       structure> during traversal."

OPQA/STRUCTURE NETWORK INHERITANCE FOR LINESTYLE AND LINEWIDTH:
  which pair of lines does NOT match?
pass/fail depending on response = position of polyline 14

*** *** ***   inheritance for polyline color index   *** *** ***

call DISCOL to try to get 5 distinct foreground colors,
  returning fcol = actual number of foreground colors
if fcol = 1 (monochrome) then
   fcol = 2
   colind[0..1] = circular list of indices = [1,0]
else
   colind[0..fcol-1] = circular list of indices = [1,..,fcol]
endif
set up PERM to randomize position of polylines
cbase = 0

set up CSS:

Structure network #101 draws actual results in random order on
left side of picture.  Structure #105 draws expected results in
same random order on right side of picture, except for polyline
14 which is deliberately drawn with incorrect attributes. This
should be the only non-matching pair in the picture.

structure #101
set linetype = 1
set linewidth = .05 in WC
polyline 1 (order within traversal)
execute 102
polyline 9
increment cbase
change-attributes: use colind(cbase mod fcol) for next color index
polyline 10
set local transformation to make lines 11,12 distinguishable
  from 5,6
execute 104
re-set local transformation to identity
polyline 13
polyline 14
execute 105

structure #102
polyline 2
increment cbase
change-attributes: use colind(cbase mod fcol) for next color index
execute 103
polyline 8

structure #103
polyline 3
increment cbase
change-attributes: use colind(cbase mod fcol) for next color index
polyline 4
execute 104
polyline 7

structure #104
polyline 5 / 11
increment cbase
change-attributes: use colind(cbase mod fcol) for next color index
polyline 6 / 12

Expected attributes (except #14, whose actual color should be
same as #13):
color index = colind(cbase mod fcol)

structure #105
polyline    cbase
--------    -----
01          0
02          0
03          2
04          3
05          3
06          4
07          3
08          2
09          0
10          1
11          1
12          4
13          1
14          2

TEST: #SR 3 20 21 23 24
      "The polyline color index attribute for the polyline
       primitive should be saved and restored by <execute
       structure> during traversal."

OPQA/STRUCTURE NETWORK INHERITANCE FOR POLYLINE COLOR INDEX:
  which pair of lines does NOT match?
pass/fail depending on response = position of polyline 14

END PROGRAM 4
